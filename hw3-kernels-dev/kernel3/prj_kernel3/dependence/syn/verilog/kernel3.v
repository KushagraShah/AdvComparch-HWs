// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel3,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.717000,HLS_SYN_LAT=1032,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=495,HLS_SYN_LUT=393,HLS_VERSION=2019_2}" *)

module kernel3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        hist_address0,
        hist_ce0,
        hist_q0,
        hist_address1,
        hist_ce1,
        hist_we1,
        hist_d1,
        weight_address0,
        weight_ce0,
        weight_q0,
        index_address0,
        index_ce0,
        index_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state10 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] hist_address0;
output   hist_ce0;
input  [31:0] hist_q0;
output  [9:0] hist_address1;
output   hist_ce1;
output   hist_we1;
output  [31:0] hist_d1;
output  [9:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [9:0] index_address0;
output   index_ce0;
input  [31:0] index_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg hist_ce0;
reg hist_ce1;
reg hist_we1;
reg weight_ce0;
reg index_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] i_0_reg_85;
wire   [0:0] icmp_ln5_fu_100_p2;
reg   [0:0] icmp_ln5_reg_122;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln5_reg_122_pp0_iter1_reg;
reg   [0:0] icmp_ln5_reg_122_pp0_iter2_reg;
reg   [0:0] icmp_ln5_reg_122_pp0_iter3_reg;
reg   [0:0] icmp_ln5_reg_122_pp0_iter4_reg;
reg   [0:0] icmp_ln5_reg_122_pp0_iter5_reg;
reg   [0:0] icmp_ln5_reg_122_pp0_iter6_reg;
wire   [10:0] i_fu_106_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln6_fu_112_p1;
reg   [63:0] zext_ln6_reg_131;
reg   [9:0] hist_addr_reg_141;
reg   [9:0] hist_addr_reg_141_pp0_iter2_reg;
reg   [9:0] hist_addr_reg_141_pp0_iter3_reg;
reg   [9:0] hist_addr_reg_141_pp0_iter4_reg;
reg   [9:0] hist_addr_reg_141_pp0_iter5_reg;
reg   [9:0] hist_addr_reg_141_pp0_iter6_reg;
reg   [31:0] hist_load_reg_152;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] weight_load_reg_157;
wire   [31:0] grp_fu_96_p2;
reg   [31:0] tmp_reg_162;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
wire    ap_block_pp0_stage0;
wire  signed [63:0] sext_ln6_fu_117_p1;
wire    ap_CS_fsm_state10;
reg   [2:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_27;
reg    ap_enable_state3_pp0_iter1_stage0;
reg    ap_enable_operation_30;
reg    ap_enable_state4_pp0_iter2_stage0;
reg    ap_enable_operation_39;
reg    ap_enable_state9_pp0_iter7_stage0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

kernel3_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel3_fadd_32nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(hist_load_reg_152),
    .din1(weight_load_reg_157),
    .ce(1'b1),
    .dout(grp_fu_96_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln5_fu_100_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_85 <= i_fu_106_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_85 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln5_reg_122 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hist_addr_reg_141 <= sext_ln6_fu_117_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        hist_addr_reg_141_pp0_iter2_reg <= hist_addr_reg_141;
        hist_addr_reg_141_pp0_iter3_reg <= hist_addr_reg_141_pp0_iter2_reg;
        hist_addr_reg_141_pp0_iter4_reg <= hist_addr_reg_141_pp0_iter3_reg;
        hist_addr_reg_141_pp0_iter5_reg <= hist_addr_reg_141_pp0_iter4_reg;
        hist_addr_reg_141_pp0_iter6_reg <= hist_addr_reg_141_pp0_iter5_reg;
        icmp_ln5_reg_122_pp0_iter2_reg <= icmp_ln5_reg_122_pp0_iter1_reg;
        icmp_ln5_reg_122_pp0_iter3_reg <= icmp_ln5_reg_122_pp0_iter2_reg;
        icmp_ln5_reg_122_pp0_iter4_reg <= icmp_ln5_reg_122_pp0_iter3_reg;
        icmp_ln5_reg_122_pp0_iter5_reg <= icmp_ln5_reg_122_pp0_iter4_reg;
        icmp_ln5_reg_122_pp0_iter6_reg <= icmp_ln5_reg_122_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_122_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        hist_load_reg_152 <= hist_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln5_reg_122 <= icmp_ln5_fu_100_p2;
        icmp_ln5_reg_122_pp0_iter1_reg <= icmp_ln5_reg_122;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_122_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_162 <= grp_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_122_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_load_reg_157 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln5_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln6_reg_131[10 : 0] <= zext_ln6_fu_112_p1[10 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln5_fu_100_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        hist_ce0 = 1'b1;
    end else begin
        hist_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        hist_ce1 = 1'b1;
    end else begin
        hist_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln5_reg_122_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        hist_we1 = 1'b1;
    end else begin
        hist_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        index_ce0 = 1'b1;
    end else begin
        index_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln5_fu_100_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln5_fu_100_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_27 = (icmp_ln5_reg_122 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_30 = (icmp_ln5_reg_122_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_39 = (icmp_ln5_reg_122_pp0_iter6_reg == 1'd0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state3_pp0_iter1_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_enable_state4_pp0_iter2_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_enable_state9_pp0_iter7_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

assign hist_address0 = sext_ln6_fu_117_p1;

assign hist_address1 = hist_addr_reg_141_pp0_iter6_reg;

assign hist_d1 = tmp_reg_162;

assign i_fu_106_p2 = (i_0_reg_85 + 11'd1);

assign icmp_ln5_fu_100_p2 = ((i_0_reg_85 == 11'd1024) ? 1'b1 : 1'b0);

assign index_address0 = zext_ln6_fu_112_p1;

assign sext_ln6_fu_117_p1 = $signed(index_q0);

assign weight_address0 = zext_ln6_reg_131;

assign zext_ln6_fu_112_p1 = i_0_reg_85;

always @ (posedge ap_clk) begin
    zext_ln6_reg_131[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //kernel3
