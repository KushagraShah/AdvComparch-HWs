// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "kernel3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic kernel3::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic kernel3::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> kernel3::ap_ST_fsm_state1 = "1";
const sc_lv<3> kernel3::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> kernel3::ap_ST_fsm_state10 = "100";
const sc_lv<32> kernel3::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool kernel3::ap_const_boolean_1 = true;
const sc_lv<32> kernel3::ap_const_lv32_1 = "1";
const bool kernel3::ap_const_boolean_0 = false;
const sc_lv<1> kernel3::ap_const_lv1_0 = "0";
const sc_lv<1> kernel3::ap_const_lv1_1 = "1";
const sc_lv<11> kernel3::ap_const_lv11_0 = "00000000000";
const sc_lv<11> kernel3::ap_const_lv11_400 = "10000000000";
const sc_lv<11> kernel3::ap_const_lv11_1 = "1";
const sc_lv<32> kernel3::ap_const_lv32_2 = "10";

kernel3::kernel3(sc_module_name name) : sc_module(name), mVcdFile(0) {
    kernel3_fadd_32nsbkb_U1 = new kernel3_fadd_32nsbkb<1,4,32,32,32>("kernel3_fadd_32nsbkb_U1");
    kernel3_fadd_32nsbkb_U1->clk(ap_clk);
    kernel3_fadd_32nsbkb_U1->reset(ap_rst);
    kernel3_fadd_32nsbkb_U1->din0(hist_load_reg_152);
    kernel3_fadd_32nsbkb_U1->din1(weight_load_reg_157);
    kernel3_fadd_32nsbkb_U1->ce(ap_var_for_const0);
    kernel3_fadd_32nsbkb_U1->dout(grp_fu_96_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter7);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln5_fu_100_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_enable_operation_27);
    sensitive << ( icmp_ln5_reg_122 );

    SC_METHOD(thread_ap_enable_operation_30);
    sensitive << ( icmp_ln5_reg_122_pp0_iter1_reg );

    SC_METHOD(thread_ap_enable_operation_39);
    sensitive << ( icmp_ln5_reg_122_pp0_iter6_reg );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_state3_pp0_iter1_stage0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_enable_state4_pp0_iter2_stage0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_enable_state9_pp0_iter7_stage0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_hist_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( sext_ln6_fu_117_p1 );

    SC_METHOD(thread_hist_address1);
    sensitive << ( hist_addr_reg_141_pp0_iter6_reg );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_hist_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_hist_ce1);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    SC_METHOD(thread_hist_d1);
    sensitive << ( tmp_reg_162 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_hist_we1);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln5_reg_122_pp0_iter6_reg );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    SC_METHOD(thread_i_fu_106_p2);
    sensitive << ( i_0_reg_85 );

    SC_METHOD(thread_icmp_ln5_fu_100_p2);
    sensitive << ( i_0_reg_85 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_index_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln6_fu_112_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_index_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_sext_ln6_fu_117_p1);
    sensitive << ( index_q0 );

    SC_METHOD(thread_weight_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( zext_ln6_reg_131 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_weight_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_zext_ln6_fu_112_p1);
    sensitive << ( i_0_reg_85 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln5_fu_100_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "kernel3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, hist_address0, "(port)hist_address0");
    sc_trace(mVcdFile, hist_ce0, "(port)hist_ce0");
    sc_trace(mVcdFile, hist_q0, "(port)hist_q0");
    sc_trace(mVcdFile, hist_address1, "(port)hist_address1");
    sc_trace(mVcdFile, hist_ce1, "(port)hist_ce1");
    sc_trace(mVcdFile, hist_we1, "(port)hist_we1");
    sc_trace(mVcdFile, hist_d1, "(port)hist_d1");
    sc_trace(mVcdFile, weight_address0, "(port)weight_address0");
    sc_trace(mVcdFile, weight_ce0, "(port)weight_ce0");
    sc_trace(mVcdFile, weight_q0, "(port)weight_q0");
    sc_trace(mVcdFile, index_address0, "(port)index_address0");
    sc_trace(mVcdFile, index_ce0, "(port)index_ce0");
    sc_trace(mVcdFile, index_q0, "(port)index_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_0_reg_85, "i_0_reg_85");
    sc_trace(mVcdFile, icmp_ln5_fu_100_p2, "icmp_ln5_fu_100_p2");
    sc_trace(mVcdFile, icmp_ln5_reg_122, "icmp_ln5_reg_122");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter4, "ap_block_state6_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter5, "ap_block_state7_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter6, "ap_block_state8_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter7, "ap_block_state9_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln5_reg_122_pp0_iter1_reg, "icmp_ln5_reg_122_pp0_iter1_reg");
    sc_trace(mVcdFile, icmp_ln5_reg_122_pp0_iter2_reg, "icmp_ln5_reg_122_pp0_iter2_reg");
    sc_trace(mVcdFile, icmp_ln5_reg_122_pp0_iter3_reg, "icmp_ln5_reg_122_pp0_iter3_reg");
    sc_trace(mVcdFile, icmp_ln5_reg_122_pp0_iter4_reg, "icmp_ln5_reg_122_pp0_iter4_reg");
    sc_trace(mVcdFile, icmp_ln5_reg_122_pp0_iter5_reg, "icmp_ln5_reg_122_pp0_iter5_reg");
    sc_trace(mVcdFile, icmp_ln5_reg_122_pp0_iter6_reg, "icmp_ln5_reg_122_pp0_iter6_reg");
    sc_trace(mVcdFile, i_fu_106_p2, "i_fu_106_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, zext_ln6_fu_112_p1, "zext_ln6_fu_112_p1");
    sc_trace(mVcdFile, zext_ln6_reg_131, "zext_ln6_reg_131");
    sc_trace(mVcdFile, hist_addr_reg_141, "hist_addr_reg_141");
    sc_trace(mVcdFile, hist_addr_reg_141_pp0_iter2_reg, "hist_addr_reg_141_pp0_iter2_reg");
    sc_trace(mVcdFile, hist_addr_reg_141_pp0_iter3_reg, "hist_addr_reg_141_pp0_iter3_reg");
    sc_trace(mVcdFile, hist_addr_reg_141_pp0_iter4_reg, "hist_addr_reg_141_pp0_iter4_reg");
    sc_trace(mVcdFile, hist_addr_reg_141_pp0_iter5_reg, "hist_addr_reg_141_pp0_iter5_reg");
    sc_trace(mVcdFile, hist_addr_reg_141_pp0_iter6_reg, "hist_addr_reg_141_pp0_iter6_reg");
    sc_trace(mVcdFile, hist_load_reg_152, "hist_load_reg_152");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, weight_load_reg_157, "weight_load_reg_157");
    sc_trace(mVcdFile, grp_fu_96_p2, "grp_fu_96_p2");
    sc_trace(mVcdFile, tmp_reg_162, "tmp_reg_162");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, sext_ln6_fu_117_p1, "sext_ln6_fu_117_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp0, "ap_block_pp0");
    sc_trace(mVcdFile, ap_enable_operation_27, "ap_enable_operation_27");
    sc_trace(mVcdFile, ap_enable_state3_pp0_iter1_stage0, "ap_enable_state3_pp0_iter1_stage0");
    sc_trace(mVcdFile, ap_enable_operation_30, "ap_enable_operation_30");
    sc_trace(mVcdFile, ap_enable_state4_pp0_iter2_stage0, "ap_enable_state4_pp0_iter2_stage0");
    sc_trace(mVcdFile, ap_enable_operation_39, "ap_enable_operation_39");
    sc_trace(mVcdFile, ap_enable_state9_pp0_iter7_stage0, "ap_enable_state9_pp0_iter7_stage0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("kernel3.hdltvin.dat");
    mHdltvoutHandle.open("kernel3.hdltvout.dat");
}

kernel3::~kernel3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete kernel3_fadd_32nsbkb_U1;
}

void kernel3::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void kernel3::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter7 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln5_fu_100_p2.read(), ap_const_lv1_0))) {
        i_0_reg_85 = i_fu_106_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_85 = ap_const_lv11_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln5_reg_122.read(), ap_const_lv1_0))) {
        hist_addr_reg_141 =  (sc_lv<10>) (sext_ln6_fu_117_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        hist_addr_reg_141_pp0_iter2_reg = hist_addr_reg_141.read();
        hist_addr_reg_141_pp0_iter3_reg = hist_addr_reg_141_pp0_iter2_reg.read();
        hist_addr_reg_141_pp0_iter4_reg = hist_addr_reg_141_pp0_iter3_reg.read();
        hist_addr_reg_141_pp0_iter5_reg = hist_addr_reg_141_pp0_iter4_reg.read();
        hist_addr_reg_141_pp0_iter6_reg = hist_addr_reg_141_pp0_iter5_reg.read();
        icmp_ln5_reg_122_pp0_iter2_reg = icmp_ln5_reg_122_pp0_iter1_reg.read();
        icmp_ln5_reg_122_pp0_iter3_reg = icmp_ln5_reg_122_pp0_iter2_reg.read();
        icmp_ln5_reg_122_pp0_iter4_reg = icmp_ln5_reg_122_pp0_iter3_reg.read();
        icmp_ln5_reg_122_pp0_iter5_reg = icmp_ln5_reg_122_pp0_iter4_reg.read();
        icmp_ln5_reg_122_pp0_iter6_reg = icmp_ln5_reg_122_pp0_iter5_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(icmp_ln5_reg_122_pp0_iter1_reg.read(), ap_const_lv1_0))) {
        hist_load_reg_152 = hist_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln5_reg_122 = icmp_ln5_fu_100_p2.read();
        icmp_ln5_reg_122_pp0_iter1_reg = icmp_ln5_reg_122.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln5_reg_122_pp0_iter5_reg.read(), ap_const_lv1_0))) {
        tmp_reg_162 = grp_fu_96_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln5_reg_122_pp0_iter1_reg.read(), ap_const_lv1_0))) {
        weight_load_reg_157 = weight_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln5_fu_100_p2.read(), ap_const_lv1_0))) {
        zext_ln6_reg_131 = zext_ln6_fu_112_p1.read();
    }
}

void kernel3::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void kernel3::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void kernel3::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[2];
}

void kernel3::thread_ap_block_pp0() {
    ap_block_pp0 = (esl_seteq<1,3,3>(ap_ST_fsm_pp0_stage0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_pp0_stage0_subdone.read()));
}

void kernel3::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel3::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel3::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel3::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel3::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel3::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel3::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel3::thread_ap_block_state6_pp0_stage0_iter4() {
    ap_block_state6_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel3::thread_ap_block_state7_pp0_stage0_iter5() {
    ap_block_state7_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel3::thread_ap_block_state8_pp0_stage0_iter6() {
    ap_block_state8_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel3::thread_ap_block_state9_pp0_stage0_iter7() {
    ap_block_state9_pp0_stage0_iter7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel3::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln5_fu_100_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void kernel3::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void kernel3::thread_ap_enable_operation_27() {
    ap_enable_operation_27 = esl_seteq<1,1,1>(icmp_ln5_reg_122.read(), ap_const_lv1_0);
}

void kernel3::thread_ap_enable_operation_30() {
    ap_enable_operation_30 = esl_seteq<1,1,1>(icmp_ln5_reg_122_pp0_iter1_reg.read(), ap_const_lv1_0);
}

void kernel3::thread_ap_enable_operation_39() {
    ap_enable_operation_39 = esl_seteq<1,1,1>(icmp_ln5_reg_122_pp0_iter6_reg.read(), ap_const_lv1_0);
}

void kernel3::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void kernel3::thread_ap_enable_state3_pp0_iter1_stage0() {
    ap_enable_state3_pp0_iter1_stage0 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_logic_1));
}

void kernel3::thread_ap_enable_state4_pp0_iter2_stage0() {
    ap_enable_state4_pp0_iter2_stage0 = (esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1));
}

void kernel3::thread_ap_enable_state9_pp0_iter7_stage0() {
    ap_enable_state9_pp0_iter7_stage0 = (esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter7.read(), ap_const_logic_1));
}

void kernel3::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void kernel3::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void kernel3::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void kernel3::thread_hist_address0() {
    hist_address0 =  (sc_lv<10>) (sext_ln6_fu_117_p1.read());
}

void kernel3::thread_hist_address1() {
    hist_address1 = hist_addr_reg_141_pp0_iter6_reg.read();
}

void kernel3::thread_hist_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        hist_ce0 = ap_const_logic_1;
    } else {
        hist_ce0 = ap_const_logic_0;
    }
}

void kernel3::thread_hist_ce1() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()))) {
        hist_ce1 = ap_const_logic_1;
    } else {
        hist_ce1 = ap_const_logic_0;
    }
}

void kernel3::thread_hist_d1() {
    hist_d1 = tmp_reg_162.read();
}

void kernel3::thread_hist_we1() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(icmp_ln5_reg_122_pp0_iter6_reg.read(), ap_const_lv1_0))) {
        hist_we1 = ap_const_logic_1;
    } else {
        hist_we1 = ap_const_logic_0;
    }
}

void kernel3::thread_i_fu_106_p2() {
    i_fu_106_p2 = (!i_0_reg_85.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_0_reg_85.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void kernel3::thread_icmp_ln5_fu_100_p2() {
    icmp_ln5_fu_100_p2 = (!i_0_reg_85.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_85.read() == ap_const_lv11_400);
}

void kernel3::thread_index_address0() {
    index_address0 =  (sc_lv<10>) (zext_ln6_fu_112_p1.read());
}

void kernel3::thread_index_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        index_ce0 = ap_const_logic_1;
    } else {
        index_ce0 = ap_const_logic_0;
    }
}

void kernel3::thread_sext_ln6_fu_117_p1() {
    sext_ln6_fu_117_p1 = esl_sext<64,32>(index_q0.read());
}

void kernel3::thread_weight_address0() {
    weight_address0 =  (sc_lv<10>) (zext_ln6_reg_131.read());
}

void kernel3::thread_weight_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        weight_ce0 = ap_const_logic_1;
    } else {
        weight_ce0 = ap_const_logic_0;
    }
}

void kernel3::thread_zext_ln6_fu_112_p1() {
    zext_ln6_fu_112_p1 = esl_zext<64,11>(i_0_reg_85.read());
}

void kernel3::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter6.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln5_fu_100_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter6.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln5_fu_100_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void kernel3::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hist_address0\" :  \"" << hist_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hist_ce0\" :  \"" << hist_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"hist_q0\" :  \"" << hist_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hist_address1\" :  \"" << hist_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hist_ce1\" :  \"" << hist_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hist_we1\" :  \"" << hist_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hist_d1\" :  \"" << hist_d1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weight_address0\" :  \"" << weight_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weight_ce0\" :  \"" << weight_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"weight_q0\" :  \"" << weight_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"index_address0\" :  \"" << index_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"index_ce0\" :  \"" << index_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"index_q0\" :  \"" << index_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

