// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel8_HH_
#define _kernel8_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "kernel8_mux_42_32bkb.h"

namespace ap_rtl {

struct kernel8 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > array_r_address0;
    sc_out< sc_logic > array_r_ce0;
    sc_in< sc_lv<32> > array_r_q0;
    sc_out< sc_lv<10> > array_r_address1;
    sc_out< sc_logic > array_r_ce1;
    sc_out< sc_logic > array_r_we1;
    sc_out< sc_lv<32> > array_r_d1;
    sc_in< sc_lv<32> > array_r_q1;
    sc_in< sc_lv<32> > multiplier;
    sc_in< sc_lv<32> > offset;


    // Module declarations
    kernel8(sc_module_name name);
    SC_HAS_PROCESS(kernel8);

    ~kernel8();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    kernel8_mux_42_32bkb<1,1,32,32,32,32,2,32>* kernel8_mux_42_32bkb_U1;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<31> > i_0_reg_131;
    sc_signal< sc_lv<31> > i_0_reg_131_pp0_iter1_reg;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<31> > i_0_reg_131_pp0_iter2_reg;
    sc_signal< sc_lv<32> > tmp_2_1_reg_143;
    sc_signal< sc_lv<32> > tmp_1_1_reg_153;
    sc_signal< sc_lv<32> > tmp_0_1_reg_164;
    sc_signal< sc_lv<32> > tmp_0_0_reg_175;
    sc_signal< sc_lv<32> > tmp_0_reg_293;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > tmp_1_reg_298;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > and_ln6_fu_197_p2;
    sc_signal< sc_lv<1> > and_ln6_reg_333;
    sc_signal< sc_lv<32> > sub_ln9_fu_203_p2;
    sc_signal< sc_lv<32> > sub_ln9_reg_338;
    sc_signal< sc_lv<2> > xor_ln12_fu_213_p2;
    sc_signal< sc_lv<2> > xor_ln12_reg_343;
    sc_signal< sc_lv<1> > icmp_ln9_fu_223_p2;
    sc_signal< sc_lv<1> > icmp_ln9_reg_348;
    sc_signal< sc_lv<1> > icmp_ln9_reg_348_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln9_reg_348_pp0_iter2_reg;
    sc_signal< sc_lv<31> > i_fu_248_p2;
    sc_signal< sc_lv<31> > i_reg_357;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > rd_val_1_reg_362;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<32> > tmp_3_1_fu_273_p2;
    sc_signal< sc_lv<32> > tmp_3_1_reg_367;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter2_state6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<31> > ap_phi_mux_i_0_phi_fu_135_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<32> > ap_phi_mux_tmp_2_1_phi_fu_146_p4;
    sc_signal< sc_lv<32> > ap_phi_mux_tmp_1_1_phi_fu_156_p4;
    sc_signal< sc_lv<32> > ap_phi_mux_tmp_0_1_phi_fu_167_p4;
    sc_signal< sc_lv<32> > ap_phi_mux_tmp_0_0_phi_fu_178_p4;
    sc_signal< sc_lv<64> > sext_ln14_fu_243_p1;
    sc_signal< sc_lv<64> > zext_ln21_fu_278_p1;
    sc_signal< sc_lv<1> > icmp_ln6_fu_185_p2;
    sc_signal< sc_lv<1> > icmp_ln6_1_fu_191_p2;
    sc_signal< sc_lv<2> > trunc_ln12_fu_209_p1;
    sc_signal< sc_lv<32> > zext_ln9_fu_219_p1;
    sc_signal< sc_lv<31> > add_ln14_fu_228_p2;
    sc_signal< sc_lv<32> > zext_ln14_fu_234_p1;
    sc_signal< sc_lv<32> > add_ln14_1_fu_238_p2;
    sc_signal< sc_lv<32> > rd_val_fu_254_p6;
    sc_signal< sc_lv<32> > rd_val_2_fu_267_p3;
    sc_signal< sc_lv<32> > tmp_3_1_fu_273_p1;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0;
    sc_signal< bool > ap_predicate_op42_load_state4;
    sc_signal< bool > ap_enable_operation_42;
    sc_signal< bool > ap_enable_state4_pp0_iter0_stage0;
    sc_signal< bool > ap_predicate_op44_load_state5;
    sc_signal< bool > ap_enable_operation_44;
    sc_signal< bool > ap_enable_state5_pp0_iter1_stage0;
    sc_signal< bool > ap_enable_operation_58;
    sc_signal< bool > ap_enable_state7_pp0_iter3_stage0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<31> ap_const_lv31_6;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_3FF;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<31> ap_const_lv31_7FFFFFFA;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_4;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln14_1_fu_238_p2();
    void thread_add_ln14_fu_228_p2();
    void thread_and_ln6_fu_197_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state4_pp0_stage0_iter0();
    void thread_ap_block_state5_pp0_stage0_iter1();
    void thread_ap_block_state6_pp0_stage0_iter2();
    void thread_ap_block_state7_pp0_stage0_iter3();
    void thread_ap_condition_pp0_exit_iter2_state6();
    void thread_ap_done();
    void thread_ap_enable_operation_42();
    void thread_ap_enable_operation_44();
    void thread_ap_enable_operation_58();
    void thread_ap_enable_pp0();
    void thread_ap_enable_state4_pp0_iter0_stage0();
    void thread_ap_enable_state5_pp0_iter1_stage0();
    void thread_ap_enable_state7_pp0_iter3_stage0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_135_p4();
    void thread_ap_phi_mux_tmp_0_0_phi_fu_178_p4();
    void thread_ap_phi_mux_tmp_0_1_phi_fu_167_p4();
    void thread_ap_phi_mux_tmp_1_1_phi_fu_156_p4();
    void thread_ap_phi_mux_tmp_2_1_phi_fu_146_p4();
    void thread_ap_predicate_op42_load_state4();
    void thread_ap_predicate_op44_load_state5();
    void thread_ap_ready();
    void thread_array_r_address0();
    void thread_array_r_address1();
    void thread_array_r_ce0();
    void thread_array_r_ce1();
    void thread_array_r_d1();
    void thread_array_r_we1();
    void thread_i_fu_248_p2();
    void thread_icmp_ln6_1_fu_191_p2();
    void thread_icmp_ln6_fu_185_p2();
    void thread_icmp_ln9_fu_223_p2();
    void thread_rd_val_2_fu_267_p3();
    void thread_sext_ln14_fu_243_p1();
    void thread_sub_ln9_fu_203_p2();
    void thread_tmp_3_1_fu_273_p1();
    void thread_tmp_3_1_fu_273_p2();
    void thread_trunc_ln12_fu_209_p1();
    void thread_xor_ln12_fu_213_p2();
    void thread_zext_ln14_fu_234_p1();
    void thread_zext_ln21_fu_278_p1();
    void thread_zext_ln9_fu_219_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
