// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel5,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.717000,HLS_SYN_LAT=4105,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=488,HLS_SYN_LUT=452,HLS_VERSION=2019_2}" *)

module kernel5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bound,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] bound;
output  [9:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [9:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] bitcast_ln42_1_fu_124_p1;
reg   [31:0] bitcast_ln42_1_reg_227;
wire   [0:0] icmp_ln42_3_fu_132_p2;
reg   [0:0] icmp_ln42_3_reg_232;
wire   [0:0] icmp_ln38_fu_138_p2;
reg   [0:0] icmp_ln38_reg_237;
wire    ap_CS_fsm_state2;
wire   [10:0] i_fu_144_p2;
reg   [10:0] i_reg_241;
wire   [0:0] icmp_ln42_2_fu_165_p2;
reg   [0:0] icmp_ln42_2_reg_256;
reg   [31:0] a_load_reg_261;
wire    ap_CS_fsm_state3;
reg   [31:0] b_load_reg_266;
wire   [31:0] grp_fu_116_p2;
reg   [31:0] ans_reg_271;
wire    ap_CS_fsm_state7;
reg   [10:0] i_0_reg_94;
wire    ap_CS_fsm_state9;
wire   [0:0] and_ln42_1_fu_216_p2;
reg   [31:0] ans_01_reg_105;
wire   [63:0] zext_ln40_fu_150_p1;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state8;
wire   [22:0] trunc_ln42_fu_128_p1;
wire   [7:0] tmp_2_fu_156_p4;
wire   [31:0] bitcast_ln42_fu_171_p1;
wire   [7:0] tmp_fu_174_p4;
wire   [22:0] trunc_ln42_1_fu_184_p1;
wire   [0:0] icmp_ln42_1_fu_194_p2;
wire   [0:0] icmp_ln42_fu_188_p2;
wire   [0:0] or_ln42_fu_200_p2;
wire   [0:0] or_ln42_1_fu_206_p2;
wire   [0:0] and_ln42_fu_210_p2;
wire   [0:0] grp_fu_120_p2;
wire    ap_CS_fsm_state10;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

kernel5_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel5_fadd_32nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_load_reg_261),
    .din1(b_load_reg_266),
    .ce(1'b1),
    .dout(grp_fu_116_p2)
);

kernel5_fcmp_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kernel5_fcmp_32nscud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ans_reg_271),
    .din1(bound),
    .ce(1'b1),
    .opcode(5'd3),
    .dout(grp_fu_120_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln42_1_fu_216_p2) & (icmp_ln38_reg_237 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        i_0_reg_94 <= i_reg_241;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_94 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_237 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        a_load_reg_261 <= a_q0;
        b_load_reg_266 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln42_1_fu_216_p2) & (icmp_ln38_reg_237 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        ans_01_reg_105 <= ans_reg_271;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_237 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        ans_reg_271 <= grp_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bitcast_ln42_1_reg_227 <= bitcast_ln42_1_fu_124_p1;
        icmp_ln42_3_reg_232 <= icmp_ln42_3_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_241 <= i_fu_144_p2;
        icmp_ln38_reg_237 <= icmp_ln38_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln42_2_reg_256 <= icmp_ln42_2_fu_165_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'd0 == and_ln42_1_fu_216_p2) & (icmp_ln38_reg_237 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln40_fu_150_p1;

assign and_ln42_1_fu_216_p2 = (grp_fu_120_p2 & and_ln42_fu_210_p2);

assign and_ln42_fu_210_p2 = (or_ln42_fu_200_p2 & or_ln42_1_fu_206_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = ans_01_reg_105;

assign b_address0 = zext_ln40_fu_150_p1;

assign bitcast_ln42_1_fu_124_p1 = bound;

assign bitcast_ln42_fu_171_p1 = ans_reg_271;

assign i_fu_144_p2 = (i_0_reg_94 + 11'd1);

assign icmp_ln38_fu_138_p2 = ((i_0_reg_94 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln42_1_fu_194_p2 = ((trunc_ln42_1_fu_184_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_2_fu_165_p2 = ((tmp_2_fu_156_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln42_3_fu_132_p2 = ((trunc_ln42_fu_128_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_188_p2 = ((tmp_fu_174_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln42_1_fu_206_p2 = (icmp_ln42_3_reg_232 | icmp_ln42_2_reg_256);

assign or_ln42_fu_200_p2 = (icmp_ln42_fu_188_p2 | icmp_ln42_1_fu_194_p2);

assign tmp_2_fu_156_p4 = {{bitcast_ln42_1_reg_227[30:23]}};

assign tmp_fu_174_p4 = {{bitcast_ln42_fu_171_p1[30:23]}};

assign trunc_ln42_1_fu_184_p1 = bitcast_ln42_fu_171_p1[22:0];

assign trunc_ln42_fu_128_p1 = bitcast_ln42_1_fu_124_p1[22:0];

assign zext_ln40_fu_150_p1 = i_0_reg_94;

endmodule //kernel5
