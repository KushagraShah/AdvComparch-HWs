// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel5,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.717000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=653,HLS_SYN_LUT=657,HLS_VERSION=2019_2}" *)

module kernel5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bound,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_state9 = 6'd4;
parameter    ap_ST_fsm_pp1_stage0 = 6'd8;
parameter    ap_ST_fsm_pp1_stage1 = 6'd16;
parameter    ap_ST_fsm_state13 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] bound;
output  [9:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [9:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] i_0_reg_125;
reg   [31:0] sum_01_reg_136;
reg  signed [31:0] i_1_reg_148;
wire   [0:0] icmp_ln8_fu_168_p2;
reg   [0:0] icmp_ln8_reg_307;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln8_reg_307_pp0_iter1_reg;
reg   [0:0] icmp_ln8_reg_307_pp0_iter2_reg;
reg   [0:0] icmp_ln8_reg_307_pp0_iter3_reg;
reg   [0:0] icmp_ln8_reg_307_pp0_iter4_reg;
reg   [0:0] icmp_ln8_reg_307_pp0_iter5_reg;
wire   [10:0] i_fu_174_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln10_fu_180_p1;
reg   [63:0] zext_ln10_reg_316;
reg   [63:0] zext_ln10_reg_316_pp0_iter1_reg;
reg   [63:0] zext_ln10_reg_316_pp0_iter2_reg;
reg   [63:0] zext_ln10_reg_316_pp0_iter3_reg;
reg   [63:0] zext_ln10_reg_316_pp0_iter4_reg;
reg   [63:0] zext_ln10_reg_316_pp0_iter5_reg;
reg   [31:0] a_load_reg_331;
reg   [31:0] b_load_reg_336;
wire   [31:0] grp_fu_159_p2;
reg   [31:0] tmp_1_reg_341;
wire   [0:0] or_ln13_1_fu_215_p2;
reg   [0:0] or_ln13_1_reg_346;
wire    ap_CS_fsm_state9;
wire   [0:0] and_ln13_fu_284_p2;
reg   [0:0] and_ln13_reg_351;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state11_pp1_stage1_iter0;
wire    ap_block_pp1_stage1_11001;
wire   [31:0] i_2_fu_290_p2;
reg   [31:0] i_2_reg_355;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] tmp_q0;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state10_pp1_stage0_iter0;
wire    ap_block_state12_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
wire    ap_block_pp1_stage1_subdone;
reg    ap_condition_pp1_exit_iter0_state11;
reg   [9:0] tmp_address0;
reg    tmp_ce0;
reg    tmp_we0;
reg   [31:0] ap_phi_mux_sum_01_phi_fu_140_p4;
wire    ap_block_pp1_stage0;
wire    ap_block_pp0_stage0;
wire  signed [63:0] sext_ln15_fu_296_p1;
wire    ap_block_pp1_stage1;
wire   [31:0] bitcast_ln13_1_fu_186_p1;
wire   [7:0] tmp_5_fu_189_p4;
wire   [22:0] trunc_ln13_fu_199_p1;
wire   [0:0] icmp_ln13_3_fu_209_p2;
wire   [0:0] icmp_ln13_fu_203_p2;
wire   [31:0] bitcast_ln13_fu_221_p1;
wire   [7:0] tmp_2_fu_225_p4;
wire   [22:0] trunc_ln13_1_fu_235_p1;
wire   [0:0] icmp_ln13_2_fu_245_p2;
wire   [0:0] icmp_ln13_1_fu_239_p2;
wire   [0:0] or_ln13_fu_251_p2;
wire   [0:0] and_ln13_1_fu_257_p2;
wire   [0:0] grp_fu_163_p2;
wire   [21:0] tmp_7_fu_268_p4;
wire   [0:0] and_ln13_2_fu_262_p2;
wire   [0:0] icmp_ln13_4_fu_278_p2;
wire    ap_block_pp1_stage0_00001;
wire    ap_CS_fsm_state13;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp1_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

kernel5_tmp #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
tmp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_address0),
    .ce0(tmp_ce0),
    .we0(tmp_we0),
    .d0(tmp_1_reg_341),
    .q0(tmp_q0)
);

kernel5_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel5_fadd_32nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_load_reg_331),
    .din1(b_load_reg_336),
    .ce(1'b1),
    .dout(grp_fu_159_p2)
);

kernel5_fcmp_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kernel5_fcmp_32nscud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_sum_01_phi_fu_140_p4),
    .din1(bound),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_163_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state11);
        end else if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_fu_168_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_125 <= i_fu_174_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_125 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_1_reg_148 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'd1 == and_ln13_reg_351))) begin
        i_1_reg_148 <= i_2_reg_355;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_307 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_load_reg_331 <= a_q0;
        b_load_reg_336 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        and_ln13_reg_351 <= and_ln13_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        i_2_reg_355 <= i_2_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln8_reg_307 <= icmp_ln8_fu_168_p2;
        icmp_ln8_reg_307_pp0_iter1_reg <= icmp_ln8_reg_307;
        zext_ln10_reg_316_pp0_iter1_reg[10 : 0] <= zext_ln10_reg_316[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln8_reg_307_pp0_iter2_reg <= icmp_ln8_reg_307_pp0_iter1_reg;
        icmp_ln8_reg_307_pp0_iter3_reg <= icmp_ln8_reg_307_pp0_iter2_reg;
        icmp_ln8_reg_307_pp0_iter4_reg <= icmp_ln8_reg_307_pp0_iter3_reg;
        icmp_ln8_reg_307_pp0_iter5_reg <= icmp_ln8_reg_307_pp0_iter4_reg;
        zext_ln10_reg_316_pp0_iter2_reg[10 : 0] <= zext_ln10_reg_316_pp0_iter1_reg[10 : 0];
        zext_ln10_reg_316_pp0_iter3_reg[10 : 0] <= zext_ln10_reg_316_pp0_iter2_reg[10 : 0];
        zext_ln10_reg_316_pp0_iter4_reg[10 : 0] <= zext_ln10_reg_316_pp0_iter3_reg[10 : 0];
        zext_ln10_reg_316_pp0_iter5_reg[10 : 0] <= zext_ln10_reg_316_pp0_iter4_reg[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        or_ln13_1_reg_346 <= or_ln13_1_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'd1 == and_ln13_reg_351))) begin
        sum_01_reg_136 <= tmp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_307_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_reg_341 <= grp_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln10_reg_316[10 : 0] <= zext_ln10_fu_180_p1[10 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln8_fu_168_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'd0 == and_ln13_fu_284_p2)) begin
        ap_condition_pp1_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (1'd1 == and_ln13_reg_351))) begin
        ap_phi_mux_sum_01_phi_fu_140_p4 = tmp_q0;
    end else begin
        ap_phi_mux_sum_01_phi_fu_140_p4 = sum_01_reg_136;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        tmp_address0 = sext_ln15_fu_296_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        tmp_address0 = zext_ln10_reg_316_pp0_iter5_reg;
    end else begin
        tmp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        tmp_ce0 = 1'b1;
    end else begin
        tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_307_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        tmp_we0 = 1'b1;
    end else begin
        tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln8_fu_168_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln8_fu_168_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((1'd0 == and_ln13_fu_284_p2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1_subdone)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'd0 == and_ln13_fu_284_p2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln10_fu_180_p1;

assign and_ln13_1_fu_257_p2 = (or_ln13_fu_251_p2 & or_ln13_1_reg_346);

assign and_ln13_2_fu_262_p2 = (grp_fu_163_p2 & and_ln13_1_fu_257_p2);

assign and_ln13_fu_284_p2 = (icmp_ln13_4_fu_278_p2 & and_ln13_2_fu_262_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_return = sum_01_reg_136;

assign b_address0 = zext_ln10_fu_180_p1;

assign bitcast_ln13_1_fu_186_p1 = bound;

assign bitcast_ln13_fu_221_p1 = sum_01_reg_136;

assign i_2_fu_290_p2 = ($signed(32'd1) + $signed(i_1_reg_148));

assign i_fu_174_p2 = (i_0_reg_125 + 11'd1);

assign icmp_ln13_1_fu_239_p2 = ((tmp_2_fu_225_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln13_2_fu_245_p2 = ((trunc_ln13_1_fu_235_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln13_3_fu_209_p2 = ((trunc_ln13_fu_199_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln13_4_fu_278_p2 = (($signed(tmp_7_fu_268_p4) < $signed(22'd1)) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_203_p2 = ((tmp_5_fu_189_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_168_p2 = ((i_0_reg_125 == 11'd1024) ? 1'b1 : 1'b0);

assign or_ln13_1_fu_215_p2 = (icmp_ln13_fu_203_p2 | icmp_ln13_3_fu_209_p2);

assign or_ln13_fu_251_p2 = (icmp_ln13_2_fu_245_p2 | icmp_ln13_1_fu_239_p2);

assign sext_ln15_fu_296_p1 = i_1_reg_148;

assign tmp_2_fu_225_p4 = {{bitcast_ln13_fu_221_p1[30:23]}};

assign tmp_5_fu_189_p4 = {{bitcast_ln13_1_fu_186_p1[30:23]}};

assign tmp_7_fu_268_p4 = {{i_1_reg_148[31:10]}};

assign trunc_ln13_1_fu_235_p1 = bitcast_ln13_fu_221_p1[22:0];

assign trunc_ln13_fu_199_p1 = bitcast_ln13_1_fu_186_p1[22:0];

assign zext_ln10_fu_180_p1 = i_0_reg_125;

always @ (posedge ap_clk) begin
    zext_ln10_reg_316[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln10_reg_316_pp0_iter1_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln10_reg_316_pp0_iter2_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln10_reg_316_pp0_iter3_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln10_reg_316_pp0_iter4_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln10_reg_316_pp0_iter5_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //kernel5
