// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "kernel5.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic kernel5::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic kernel5::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> kernel5::ap_ST_fsm_state1 = "1";
const sc_lv<6> kernel5::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<6> kernel5::ap_ST_fsm_state9 = "100";
const sc_lv<6> kernel5::ap_ST_fsm_pp1_stage0 = "1000";
const sc_lv<6> kernel5::ap_ST_fsm_pp1_stage1 = "10000";
const sc_lv<6> kernel5::ap_ST_fsm_state13 = "100000";
const sc_lv<32> kernel5::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool kernel5::ap_const_boolean_1 = true;
const sc_lv<32> kernel5::ap_const_lv32_1 = "1";
const bool kernel5::ap_const_boolean_0 = false;
const sc_lv<1> kernel5::ap_const_lv1_0 = "0";
const sc_lv<32> kernel5::ap_const_lv32_2 = "10";
const sc_lv<32> kernel5::ap_const_lv32_4 = "100";
const sc_lv<1> kernel5::ap_const_lv1_1 = "1";
const sc_lv<32> kernel5::ap_const_lv32_3 = "11";
const sc_lv<11> kernel5::ap_const_lv11_0 = "00000000000";
const sc_lv<11> kernel5::ap_const_lv11_400 = "10000000000";
const sc_lv<11> kernel5::ap_const_lv11_1 = "1";
const sc_lv<32> kernel5::ap_const_lv32_17 = "10111";
const sc_lv<32> kernel5::ap_const_lv32_1E = "11110";
const sc_lv<8> kernel5::ap_const_lv8_FF = "11111111";
const sc_lv<23> kernel5::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<32> kernel5::ap_const_lv32_A = "1010";
const sc_lv<32> kernel5::ap_const_lv32_1F = "11111";
const sc_lv<22> kernel5::ap_const_lv22_1 = "1";
const sc_lv<5> kernel5::ap_const_lv5_4 = "100";
const sc_lv<32> kernel5::ap_const_lv32_5 = "101";

kernel5::kernel5(sc_module_name name) : sc_module(name), mVcdFile(0) {
    tmp_U = new kernel5_tmp("tmp_U");
    tmp_U->clk(ap_clk);
    tmp_U->reset(ap_rst);
    tmp_U->address0(tmp_address0);
    tmp_U->ce0(tmp_ce0);
    tmp_U->we0(tmp_we0);
    tmp_U->d0(tmp_1_reg_341);
    tmp_U->q0(tmp_q0);
    kernel5_fadd_32nsbkb_U1 = new kernel5_fadd_32nsbkb<1,4,32,32,32>("kernel5_fadd_32nsbkb_U1");
    kernel5_fadd_32nsbkb_U1->clk(ap_clk);
    kernel5_fadd_32nsbkb_U1->reset(ap_rst);
    kernel5_fadd_32nsbkb_U1->din0(a_load_reg_331);
    kernel5_fadd_32nsbkb_U1->din1(b_load_reg_336);
    kernel5_fadd_32nsbkb_U1->ce(ap_var_for_const0);
    kernel5_fadd_32nsbkb_U1->dout(grp_fu_159_p2);
    kernel5_fcmp_32nscud_U2 = new kernel5_fcmp_32nscud<1,2,32,32,1>("kernel5_fcmp_32nscud_U2");
    kernel5_fcmp_32nscud_U2->clk(ap_clk);
    kernel5_fcmp_32nscud_U2->reset(ap_rst);
    kernel5_fcmp_32nscud_U2->din0(ap_phi_mux_sum_01_phi_fu_140_p4);
    kernel5_fcmp_32nscud_U2->din1(bound);
    kernel5_fcmp_32nscud_U2->ce(ap_var_for_const0);
    kernel5_fcmp_32nscud_U2->opcode(ap_var_for_const1);
    kernel5_fcmp_32nscud_U2->dout(grp_fu_163_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln10_fu_180_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_and_ln13_1_fu_257_p2);
    sensitive << ( or_ln13_1_reg_346 );
    sensitive << ( or_ln13_fu_251_p2 );

    SC_METHOD(thread_and_ln13_2_fu_262_p2);
    sensitive << ( and_ln13_1_fu_257_p2 );
    sensitive << ( grp_fu_163_p2 );

    SC_METHOD(thread_and_ln13_fu_284_p2);
    sensitive << ( and_ln13_2_fu_262_p2 );
    sensitive << ( icmp_ln13_4_fu_278_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_00001);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);

    SC_METHOD(thread_ap_block_pp1_stage1);

    SC_METHOD(thread_ap_block_pp1_stage1_11001);

    SC_METHOD(thread_ap_block_pp1_stage1_subdone);

    SC_METHOD(thread_ap_block_state10_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state11_pp1_stage1_iter0);

    SC_METHOD(thread_ap_block_state12_pp1_stage0_iter1);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter6);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln8_fu_168_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state11);
    sensitive << ( and_ln13_fu_284_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_phi_mux_sum_01_phi_fu_140_p4);
    sensitive << ( sum_01_reg_136 );
    sensitive << ( and_ln13_reg_351 );
    sensitive << ( tmp_q0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_return);
    sensitive << ( sum_01_reg_136 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_b_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln10_fu_180_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_b_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_bitcast_ln13_1_fu_186_p1);
    sensitive << ( bound );

    SC_METHOD(thread_bitcast_ln13_fu_221_p1);
    sensitive << ( sum_01_reg_136 );

    SC_METHOD(thread_i_2_fu_290_p2);
    sensitive << ( i_1_reg_148 );

    SC_METHOD(thread_i_fu_174_p2);
    sensitive << ( i_0_reg_125 );

    SC_METHOD(thread_icmp_ln13_1_fu_239_p2);
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( tmp_2_fu_225_p4 );

    SC_METHOD(thread_icmp_ln13_2_fu_245_p2);
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( trunc_ln13_1_fu_235_p1 );

    SC_METHOD(thread_icmp_ln13_3_fu_209_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( trunc_ln13_fu_199_p1 );

    SC_METHOD(thread_icmp_ln13_4_fu_278_p2);
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( tmp_7_fu_268_p4 );

    SC_METHOD(thread_icmp_ln13_fu_203_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_5_fu_189_p4 );

    SC_METHOD(thread_icmp_ln8_fu_168_p2);
    sensitive << ( i_0_reg_125 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_or_ln13_1_fu_215_p2);
    sensitive << ( icmp_ln13_3_fu_209_p2 );
    sensitive << ( icmp_ln13_fu_203_p2 );

    SC_METHOD(thread_or_ln13_fu_251_p2);
    sensitive << ( icmp_ln13_2_fu_245_p2 );
    sensitive << ( icmp_ln13_1_fu_239_p2 );

    SC_METHOD(thread_sext_ln15_fu_296_p1);
    sensitive << ( i_1_reg_148 );

    SC_METHOD(thread_tmp_2_fu_225_p4);
    sensitive << ( bitcast_ln13_fu_221_p1 );

    SC_METHOD(thread_tmp_5_fu_189_p4);
    sensitive << ( bitcast_ln13_1_fu_186_p1 );

    SC_METHOD(thread_tmp_7_fu_268_p4);
    sensitive << ( i_1_reg_148 );

    SC_METHOD(thread_tmp_address0);
    sensitive << ( zext_ln10_reg_316_pp0_iter5_reg );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( sext_ln15_fu_296_p1 );
    sensitive << ( ap_block_pp1_stage1 );

    SC_METHOD(thread_tmp_ce0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter6 );

    SC_METHOD(thread_tmp_we0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln8_reg_307_pp0_iter5_reg );
    sensitive << ( ap_enable_reg_pp0_iter6 );

    SC_METHOD(thread_trunc_ln13_1_fu_235_p1);
    sensitive << ( bitcast_ln13_fu_221_p1 );

    SC_METHOD(thread_trunc_ln13_fu_199_p1);
    sensitive << ( bitcast_ln13_1_fu_186_p1 );

    SC_METHOD(thread_zext_ln10_fu_180_p1);
    sensitive << ( i_0_reg_125 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln8_fu_168_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( and_ln13_fu_284_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_block_pp1_stage1_subdone );
    sensitive << ( ap_block_pp1_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "kernel5_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, bound, "(port)bound");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_q0, "(port)a_q0");
    sc_trace(mVcdFile, b_address0, "(port)b_address0");
    sc_trace(mVcdFile, b_ce0, "(port)b_ce0");
    sc_trace(mVcdFile, b_q0, "(port)b_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_0_reg_125, "i_0_reg_125");
    sc_trace(mVcdFile, sum_01_reg_136, "sum_01_reg_136");
    sc_trace(mVcdFile, i_1_reg_148, "i_1_reg_148");
    sc_trace(mVcdFile, icmp_ln8_fu_168_p2, "icmp_ln8_fu_168_p2");
    sc_trace(mVcdFile, icmp_ln8_reg_307, "icmp_ln8_reg_307");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter4, "ap_block_state6_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter5, "ap_block_state7_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter6, "ap_block_state8_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln8_reg_307_pp0_iter1_reg, "icmp_ln8_reg_307_pp0_iter1_reg");
    sc_trace(mVcdFile, icmp_ln8_reg_307_pp0_iter2_reg, "icmp_ln8_reg_307_pp0_iter2_reg");
    sc_trace(mVcdFile, icmp_ln8_reg_307_pp0_iter3_reg, "icmp_ln8_reg_307_pp0_iter3_reg");
    sc_trace(mVcdFile, icmp_ln8_reg_307_pp0_iter4_reg, "icmp_ln8_reg_307_pp0_iter4_reg");
    sc_trace(mVcdFile, icmp_ln8_reg_307_pp0_iter5_reg, "icmp_ln8_reg_307_pp0_iter5_reg");
    sc_trace(mVcdFile, i_fu_174_p2, "i_fu_174_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, zext_ln10_fu_180_p1, "zext_ln10_fu_180_p1");
    sc_trace(mVcdFile, zext_ln10_reg_316, "zext_ln10_reg_316");
    sc_trace(mVcdFile, zext_ln10_reg_316_pp0_iter1_reg, "zext_ln10_reg_316_pp0_iter1_reg");
    sc_trace(mVcdFile, zext_ln10_reg_316_pp0_iter2_reg, "zext_ln10_reg_316_pp0_iter2_reg");
    sc_trace(mVcdFile, zext_ln10_reg_316_pp0_iter3_reg, "zext_ln10_reg_316_pp0_iter3_reg");
    sc_trace(mVcdFile, zext_ln10_reg_316_pp0_iter4_reg, "zext_ln10_reg_316_pp0_iter4_reg");
    sc_trace(mVcdFile, zext_ln10_reg_316_pp0_iter5_reg, "zext_ln10_reg_316_pp0_iter5_reg");
    sc_trace(mVcdFile, a_load_reg_331, "a_load_reg_331");
    sc_trace(mVcdFile, b_load_reg_336, "b_load_reg_336");
    sc_trace(mVcdFile, grp_fu_159_p2, "grp_fu_159_p2");
    sc_trace(mVcdFile, tmp_1_reg_341, "tmp_1_reg_341");
    sc_trace(mVcdFile, or_ln13_1_fu_215_p2, "or_ln13_1_fu_215_p2");
    sc_trace(mVcdFile, or_ln13_1_reg_346, "or_ln13_1_reg_346");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, and_ln13_fu_284_p2, "and_ln13_fu_284_p2");
    sc_trace(mVcdFile, and_ln13_reg_351, "and_ln13_reg_351");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage1, "ap_CS_fsm_pp1_stage1");
    sc_trace(mVcdFile, ap_block_state11_pp1_stage1_iter0, "ap_block_state11_pp1_stage1_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage1_11001, "ap_block_pp1_stage1_11001");
    sc_trace(mVcdFile, i_2_fu_290_p2, "i_2_fu_290_p2");
    sc_trace(mVcdFile, i_2_reg_355, "i_2_reg_355");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, tmp_q0, "tmp_q0");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_block_state10_pp1_stage0_iter0, "ap_block_state10_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state12_pp1_stage0_iter1, "ap_block_state12_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_block_pp1_stage1_subdone, "ap_block_pp1_stage1_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state11, "ap_condition_pp1_exit_iter0_state11");
    sc_trace(mVcdFile, tmp_address0, "tmp_address0");
    sc_trace(mVcdFile, tmp_ce0, "tmp_ce0");
    sc_trace(mVcdFile, tmp_we0, "tmp_we0");
    sc_trace(mVcdFile, ap_phi_mux_sum_01_phi_fu_140_p4, "ap_phi_mux_sum_01_phi_fu_140_p4");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, sext_ln15_fu_296_p1, "sext_ln15_fu_296_p1");
    sc_trace(mVcdFile, ap_block_pp1_stage1, "ap_block_pp1_stage1");
    sc_trace(mVcdFile, bitcast_ln13_1_fu_186_p1, "bitcast_ln13_1_fu_186_p1");
    sc_trace(mVcdFile, tmp_5_fu_189_p4, "tmp_5_fu_189_p4");
    sc_trace(mVcdFile, trunc_ln13_fu_199_p1, "trunc_ln13_fu_199_p1");
    sc_trace(mVcdFile, icmp_ln13_3_fu_209_p2, "icmp_ln13_3_fu_209_p2");
    sc_trace(mVcdFile, icmp_ln13_fu_203_p2, "icmp_ln13_fu_203_p2");
    sc_trace(mVcdFile, bitcast_ln13_fu_221_p1, "bitcast_ln13_fu_221_p1");
    sc_trace(mVcdFile, tmp_2_fu_225_p4, "tmp_2_fu_225_p4");
    sc_trace(mVcdFile, trunc_ln13_1_fu_235_p1, "trunc_ln13_1_fu_235_p1");
    sc_trace(mVcdFile, icmp_ln13_2_fu_245_p2, "icmp_ln13_2_fu_245_p2");
    sc_trace(mVcdFile, icmp_ln13_1_fu_239_p2, "icmp_ln13_1_fu_239_p2");
    sc_trace(mVcdFile, or_ln13_fu_251_p2, "or_ln13_fu_251_p2");
    sc_trace(mVcdFile, and_ln13_1_fu_257_p2, "and_ln13_1_fu_257_p2");
    sc_trace(mVcdFile, grp_fu_163_p2, "grp_fu_163_p2");
    sc_trace(mVcdFile, tmp_7_fu_268_p4, "tmp_7_fu_268_p4");
    sc_trace(mVcdFile, and_ln13_2_fu_262_p2, "and_ln13_2_fu_262_p2");
    sc_trace(mVcdFile, icmp_ln13_4_fu_278_p2, "icmp_ln13_4_fu_278_p2");
    sc_trace(mVcdFile, ap_block_pp1_stage0_00001, "ap_block_pp1_stage0_00001");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
#endif

    }
    mHdltvinHandle.open("kernel5.hdltvin.dat");
    mHdltvoutHandle.open("kernel5.hdltvout.dat");
}

kernel5::~kernel5() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete tmp_U;
    delete kernel5_fadd_32nsbkb_U1;
    delete kernel5_fcmp_32nscud_U2;
}

void kernel5::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void kernel5::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv5_4;
}

void kernel5::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter6 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state11.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state11.read()))) {
            ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state11.read() ^ ap_const_logic_1);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_enable_reg_pp1_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_168_p2.read(), ap_const_lv1_0))) {
        i_0_reg_125 = i_fu_174_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_125 = ap_const_lv11_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_1_reg_148 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(and_ln13_reg_351.read(), ap_const_lv1_1))) {
        i_1_reg_148 = i_2_reg_355.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln8_reg_307.read(), ap_const_lv1_0))) {
        a_load_reg_331 = a_q0.read();
        b_load_reg_336 = b_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0))) {
        and_ln13_reg_351 = and_ln13_fu_284_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()))) {
        i_2_reg_355 = i_2_fu_290_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln8_reg_307 = icmp_ln8_fu_168_p2.read();
        icmp_ln8_reg_307_pp0_iter1_reg = icmp_ln8_reg_307.read();
        zext_ln10_reg_316_pp0_iter1_reg = zext_ln10_reg_316.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        icmp_ln8_reg_307_pp0_iter2_reg = icmp_ln8_reg_307_pp0_iter1_reg.read();
        icmp_ln8_reg_307_pp0_iter3_reg = icmp_ln8_reg_307_pp0_iter2_reg.read();
        icmp_ln8_reg_307_pp0_iter4_reg = icmp_ln8_reg_307_pp0_iter3_reg.read();
        icmp_ln8_reg_307_pp0_iter5_reg = icmp_ln8_reg_307_pp0_iter4_reg.read();
        zext_ln10_reg_316_pp0_iter2_reg = zext_ln10_reg_316_pp0_iter1_reg.read();
        zext_ln10_reg_316_pp0_iter3_reg = zext_ln10_reg_316_pp0_iter2_reg.read();
        zext_ln10_reg_316_pp0_iter4_reg = zext_ln10_reg_316_pp0_iter3_reg.read();
        zext_ln10_reg_316_pp0_iter5_reg = zext_ln10_reg_316_pp0_iter4_reg.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        or_ln13_1_reg_346 = or_ln13_1_fu_215_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(and_ln13_reg_351.read(), ap_const_lv1_1))) {
        sum_01_reg_136 = tmp_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln8_reg_307_pp0_iter4_reg.read(), ap_const_lv1_0))) {
        tmp_1_reg_341 = grp_fu_159_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln8_fu_168_p2.read(), ap_const_lv1_0))) {
        zext_ln10_reg_316 = zext_ln10_fu_180_p1.read();
    }
}

void kernel5::thread_a_address0() {
    a_address0 =  (sc_lv<10>) (zext_ln10_fu_180_p1.read());
}

void kernel5::thread_a_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void kernel5::thread_and_ln13_1_fu_257_p2() {
    and_ln13_1_fu_257_p2 = (or_ln13_fu_251_p2.read() & or_ln13_1_reg_346.read());
}

void kernel5::thread_and_ln13_2_fu_262_p2() {
    and_ln13_2_fu_262_p2 = (and_ln13_1_fu_257_p2.read() & grp_fu_163_p2.read());
}

void kernel5::thread_and_ln13_fu_284_p2() {
    and_ln13_fu_284_p2 = (and_ln13_2_fu_262_p2.read() & icmp_ln13_4_fu_278_p2.read());
}

void kernel5::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void kernel5::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[3];
}

void kernel5::thread_ap_CS_fsm_pp1_stage1() {
    ap_CS_fsm_pp1_stage1 = ap_CS_fsm.read()[4];
}

void kernel5::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void kernel5::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[5];
}

void kernel5::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[2];
}

void kernel5::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_pp1_stage0_00001() {
    ap_block_pp1_stage0_00001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_pp1_stage1() {
    ap_block_pp1_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_pp1_stage1_11001() {
    ap_block_pp1_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_pp1_stage1_subdone() {
    ap_block_pp1_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state10_pp1_stage0_iter0() {
    ap_block_state10_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state11_pp1_stage1_iter0() {
    ap_block_state11_pp1_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state12_pp1_stage0_iter1() {
    ap_block_state12_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state6_pp0_stage0_iter4() {
    ap_block_state6_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state7_pp0_stage0_iter5() {
    ap_block_state7_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state8_pp0_stage0_iter6() {
    ap_block_state8_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln8_fu_168_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void kernel5::thread_ap_condition_pp1_exit_iter0_state11() {
    if (esl_seteq<1,1,1>(ap_const_lv1_0, and_ln13_fu_284_p2.read())) {
        ap_condition_pp1_exit_iter0_state11 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state11 = ap_const_logic_0;
    }
}

void kernel5::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void kernel5::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void kernel5::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void kernel5::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void kernel5::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void kernel5::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void kernel5::thread_ap_phi_mux_sum_01_phi_fu_140_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(and_ln13_reg_351.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_sum_01_phi_fu_140_p4 = tmp_q0.read();
    } else {
        ap_phi_mux_sum_01_phi_fu_140_p4 = sum_01_reg_136.read();
    }
}

void kernel5::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void kernel5::thread_ap_return() {
    ap_return = sum_01_reg_136.read();
}

void kernel5::thread_b_address0() {
    b_address0 =  (sc_lv<10>) (zext_ln10_fu_180_p1.read());
}

void kernel5::thread_b_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        b_ce0 = ap_const_logic_1;
    } else {
        b_ce0 = ap_const_logic_0;
    }
}

void kernel5::thread_bitcast_ln13_1_fu_186_p1() {
    bitcast_ln13_1_fu_186_p1 = bound.read();
}

void kernel5::thread_bitcast_ln13_fu_221_p1() {
    bitcast_ln13_fu_221_p1 = sum_01_reg_136.read();
}

void kernel5::thread_i_2_fu_290_p2() {
    i_2_fu_290_p2 = (!ap_const_lv32_1.is_01() || !i_1_reg_148.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_bigint<32>(i_1_reg_148.read()));
}

void kernel5::thread_i_fu_174_p2() {
    i_fu_174_p2 = (!i_0_reg_125.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_0_reg_125.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void kernel5::thread_icmp_ln13_1_fu_239_p2() {
    icmp_ln13_1_fu_239_p2 = (!tmp_2_fu_225_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_2_fu_225_p4.read() != ap_const_lv8_FF);
}

void kernel5::thread_icmp_ln13_2_fu_245_p2() {
    icmp_ln13_2_fu_245_p2 = (!trunc_ln13_1_fu_235_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln13_1_fu_235_p1.read() == ap_const_lv23_0);
}

void kernel5::thread_icmp_ln13_3_fu_209_p2() {
    icmp_ln13_3_fu_209_p2 = (!trunc_ln13_fu_199_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln13_fu_199_p1.read() == ap_const_lv23_0);
}

void kernel5::thread_icmp_ln13_4_fu_278_p2() {
    icmp_ln13_4_fu_278_p2 = (!tmp_7_fu_268_p4.read().is_01() || !ap_const_lv22_1.is_01())? sc_lv<1>(): (sc_bigint<22>(tmp_7_fu_268_p4.read()) < sc_bigint<22>(ap_const_lv22_1));
}

void kernel5::thread_icmp_ln13_fu_203_p2() {
    icmp_ln13_fu_203_p2 = (!tmp_5_fu_189_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_5_fu_189_p4.read() != ap_const_lv8_FF);
}

void kernel5::thread_icmp_ln8_fu_168_p2() {
    icmp_ln8_fu_168_p2 = (!i_0_reg_125.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_125.read() == ap_const_lv11_400);
}

void kernel5::thread_or_ln13_1_fu_215_p2() {
    or_ln13_1_fu_215_p2 = (icmp_ln13_3_fu_209_p2.read() | icmp_ln13_fu_203_p2.read());
}

void kernel5::thread_or_ln13_fu_251_p2() {
    or_ln13_fu_251_p2 = (icmp_ln13_2_fu_245_p2.read() | icmp_ln13_1_fu_239_p2.read());
}

void kernel5::thread_sext_ln15_fu_296_p1() {
    sext_ln15_fu_296_p1 = esl_sext<64,32>(i_1_reg_148.read());
}

void kernel5::thread_tmp_2_fu_225_p4() {
    tmp_2_fu_225_p4 = bitcast_ln13_fu_221_p1.read().range(30, 23);
}

void kernel5::thread_tmp_5_fu_189_p4() {
    tmp_5_fu_189_p4 = bitcast_ln13_1_fu_186_p1.read().range(30, 23);
}

void kernel5::thread_tmp_7_fu_268_p4() {
    tmp_7_fu_268_p4 = i_1_reg_148.read().range(31, 10);
}

void kernel5::thread_tmp_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage1.read(), ap_const_boolean_0))) {
        tmp_address0 =  (sc_lv<10>) (sext_ln15_fu_296_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter6.read()))) {
        tmp_address0 =  (sc_lv<10>) (zext_ln10_reg_316_pp0_iter5_reg.read());
    } else {
        tmp_address0 = "XXXXXXXXXX";
    }
}

void kernel5::thread_tmp_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter6.read())))) {
        tmp_ce0 = ap_const_logic_1;
    } else {
        tmp_ce0 = ap_const_logic_0;
    }
}

void kernel5::thread_tmp_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_reg_307_pp0_iter5_reg.read(), ap_const_lv1_0))) {
        tmp_we0 = ap_const_logic_1;
    } else {
        tmp_we0 = ap_const_logic_0;
    }
}

void kernel5::thread_trunc_ln13_1_fu_235_p1() {
    trunc_ln13_1_fu_235_p1 = bitcast_ln13_fu_221_p1.read().range(23-1, 0);
}

void kernel5::thread_trunc_ln13_fu_199_p1() {
    trunc_ln13_fu_199_p1 = bitcast_ln13_1_fu_186_p1.read().range(23-1, 0);
}

void kernel5::thread_zext_ln10_fu_180_p1() {
    zext_ln10_fu_180_p1 = esl_zext<64,11>(i_0_reg_125.read());
}

void kernel5::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter6.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter5.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln8_fu_168_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter6.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter5.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln8_fu_168_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 8 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, and_ln13_fu_284_p2.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, and_ln13_fu_284_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void kernel5::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"bound\" :  \"" << bound.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address0\" :  \"" << a_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce0\" :  \"" << a_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_q0\" :  \"" << a_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address0\" :  \"" << b_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce0\" :  \"" << b_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_q0\" :  \"" << b_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

