// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel3_HH_
#define _kernel3_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "kernel3_fadd_32nsbkb.h"

namespace ap_rtl {

struct kernel3 : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > hist_address0;
    sc_out< sc_logic > hist_ce0;
    sc_in< sc_lv<32> > hist_q0;
    sc_out< sc_lv<10> > hist_address1;
    sc_out< sc_logic > hist_ce1;
    sc_out< sc_logic > hist_we1;
    sc_out< sc_lv<32> > hist_d1;
    sc_out< sc_lv<10> > weight_address0;
    sc_out< sc_logic > weight_ce0;
    sc_in< sc_lv<32> > weight_q0;
    sc_out< sc_lv<10> > index_address0;
    sc_out< sc_logic > index_ce0;
    sc_in< sc_lv<32> > index_q0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    kernel3(sc_module_name name);
    SC_HAS_PROCESS(kernel3);

    ~kernel3();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    kernel3_fadd_32nsbkb<1,4,32,32,32>* kernel3_fadd_32nsbkb_U1;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<11> > i_0_reg_85;
    sc_signal< sc_lv<1> > icmp_ln5_fu_100_p2;
    sc_signal< sc_lv<1> > icmp_ln5_reg_122;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln5_reg_122_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln5_reg_122_pp0_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln5_reg_122_pp0_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln5_reg_122_pp0_iter4_reg;
    sc_signal< sc_lv<1> > icmp_ln5_reg_122_pp0_iter5_reg;
    sc_signal< sc_lv<1> > icmp_ln5_reg_122_pp0_iter6_reg;
    sc_signal< sc_lv<11> > i_fu_106_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > zext_ln6_fu_112_p1;
    sc_signal< sc_lv<64> > zext_ln6_reg_131;
    sc_signal< sc_lv<10> > hist_addr_reg_141;
    sc_signal< sc_lv<10> > hist_addr_reg_141_pp0_iter2_reg;
    sc_signal< sc_lv<10> > hist_addr_reg_141_pp0_iter3_reg;
    sc_signal< sc_lv<10> > hist_addr_reg_141_pp0_iter4_reg;
    sc_signal< sc_lv<10> > hist_addr_reg_141_pp0_iter5_reg;
    sc_signal< sc_lv<10> > hist_addr_reg_141_pp0_iter6_reg;
    sc_signal< sc_lv<32> > hist_load_reg_152;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<32> > weight_load_reg_157;
    sc_signal< sc_lv<32> > grp_fu_96_p2;
    sc_signal< sc_lv<32> > tmp_reg_162;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > sext_ln6_fu_117_p1;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0;
    sc_signal< bool > ap_enable_operation_27;
    sc_signal< bool > ap_enable_state3_pp0_iter1_stage0;
    sc_signal< bool > ap_enable_operation_30;
    sc_signal< bool > ap_enable_state4_pp0_iter2_stage0;
    sc_signal< bool > ap_enable_operation_39;
    sc_signal< bool > ap_enable_state9_pp0_iter7_stage0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_block_pp0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_operation_27();
    void thread_ap_enable_operation_30();
    void thread_ap_enable_operation_39();
    void thread_ap_enable_pp0();
    void thread_ap_enable_state3_pp0_iter1_stage0();
    void thread_ap_enable_state4_pp0_iter2_stage0();
    void thread_ap_enable_state9_pp0_iter7_stage0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_hist_address0();
    void thread_hist_address1();
    void thread_hist_ce0();
    void thread_hist_ce1();
    void thread_hist_d1();
    void thread_hist_we1();
    void thread_i_fu_106_p2();
    void thread_icmp_ln5_fu_100_p2();
    void thread_index_address0();
    void thread_index_ce0();
    void thread_sext_ln6_fu_117_p1();
    void thread_weight_address0();
    void thread_weight_ce0();
    void thread_zext_ln6_fu_112_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
