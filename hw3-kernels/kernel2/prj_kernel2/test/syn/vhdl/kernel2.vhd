-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    array_0_ce0 : OUT STD_LOGIC;
    array_0_we0 : OUT STD_LOGIC;
    array_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    array_0_ce1 : OUT STD_LOGIC;
    array_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    array_1_ce0 : OUT STD_LOGIC;
    array_1_we0 : OUT STD_LOGIC;
    array_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    array_1_ce1 : OUT STD_LOGIC;
    array_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    array_2_ce0 : OUT STD_LOGIC;
    array_2_we0 : OUT STD_LOGIC;
    array_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_2_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    array_2_ce1 : OUT STD_LOGIC;
    array_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel2,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.580000,HLS_SYN_LAT=4099,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=7,HLS_SYN_FF=2051,HLS_SYN_LUT=1373,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv10_3FE : STD_LOGIC_VECTOR (9 downto 0) := "1111111110";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_3FD : STD_LOGIC_VECTOR (9 downto 0) := "1111111101";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv22_556 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010101010110";
    constant ap_const_lv24_AAB : STD_LOGIC_VECTOR (23 downto 0) := "000000000000101010101011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_reg_193 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_reg_193_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_0_reg_193_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_reg_193_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln6_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_reg_425 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_reg_425_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_reg_425_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_reg_425_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln7_fu_244_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln7_reg_429 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln7_1_fu_248_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln7_1_reg_435 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln7_1_reg_435_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln7_1_reg_435_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln7_2_fu_260_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln7_2_reg_441 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln7_2_reg_441_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln7_2_reg_441_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln7_fu_271_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln7_reg_447 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal add_ln7_reg_447_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln7_reg_447_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_288_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_453 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal udiv_ln7_1_reg_458 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln7_2_fu_306_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln7_2_reg_463 : STD_LOGIC_VECTOR (2 downto 0);
    signal udiv_ln7_2_reg_467 : STD_LOGIC_VECTOR (9 downto 0);
    signal udiv_ln7_reg_472 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln7_3_fu_340_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln7_3_reg_492 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln7_1_fu_350_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln7_1_reg_511 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal udiv_ln7_3_reg_560 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal mul_ln7_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln7_reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_197_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_phi_ln7_1_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_phi_ln7_1_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_phi_ln7_1_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_phi_ln7_1_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_phi_ln7_1_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln7_2_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_phi_ln7_2_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_phi_ln7_2_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_phi_ln7_2_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_phi_ln7_2_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln7_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_phi_ln7_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_phi_ln7_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_phi_ln7_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_phi_ln7_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln7_1_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln7_2_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln7_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln7_3_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal trunc_ln7_4_fu_387_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln7_3_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_254_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_254_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_265_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_265_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_276_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_276_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_282_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln7_2_fu_397_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln7_3_fu_404_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln7_1_fu_411_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_276_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln7_4_fu_418_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_282_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln7_2_fu_397_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln7_2_fu_397_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln7_3_fu_404_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln7_3_fu_404_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln7_1_fu_411_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln7_1_fu_411_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln7_4_fu_418_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln7_4_fu_418_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln7_1_fu_411_p10 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln7_2_fu_397_p10 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln7_3_fu_404_p10 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln7_4_fu_418_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_condition_220 : BOOLEAN;
    signal ap_condition_206 : BOOLEAN;
    signal ap_condition_234 : BOOLEAN;

    component kernel2_urem_10nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component kernel2_urem_11nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component kernel2_mul_mul_1dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component kernel2_mul_mul_1eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    kernel2_urem_10nsbkb_U1 : component kernel2_urem_10nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 10,
        din1_WIDTH => 3,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_254_p0,
        din1 => grp_fu_254_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_254_p2);

    kernel2_urem_10nsbkb_U2 : component kernel2_urem_10nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 10,
        din1_WIDTH => 3,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_265_p0,
        din1 => grp_fu_265_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_265_p2);

    kernel2_urem_10nsbkb_U3 : component kernel2_urem_10nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 10,
        din1_WIDTH => 3,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_276_p0,
        din1 => grp_fu_276_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_276_p2);

    kernel2_urem_11nscud_U4 : component kernel2_urem_11nscud
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 3,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => i_0_reg_193,
        din1 => grp_fu_282_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_282_p2);

    kernel2_mul_mul_1dEe_U5 : component kernel2_mul_mul_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 10,
        dout_WIDTH => 22)
    port map (
        din0 => mul_ln7_2_fu_397_p0,
        din1 => mul_ln7_2_fu_397_p1,
        dout => mul_ln7_2_fu_397_p2);

    kernel2_mul_mul_1dEe_U6 : component kernel2_mul_mul_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 10,
        dout_WIDTH => 22)
    port map (
        din0 => mul_ln7_3_fu_404_p0,
        din1 => mul_ln7_3_fu_404_p1,
        dout => mul_ln7_3_fu_404_p2);

    kernel2_mul_mul_1dEe_U7 : component kernel2_mul_mul_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 10,
        dout_WIDTH => 22)
    port map (
        din0 => mul_ln7_1_fu_411_p0,
        din1 => mul_ln7_1_fu_411_p1,
        dout => mul_ln7_1_fu_411_p2);

    kernel2_mul_mul_1eOg_U8 : component kernel2_mul_mul_1eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 11,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln7_4_fu_418_p0,
        din1 => mul_ln7_4_fu_418_p1,
        dout => mul_ln7_4_fu_418_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter4_phi_ln7_1_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_206)) then
                if ((ap_const_boolean_1 = ap_condition_220)) then 
                    ap_phi_reg_pp0_iter4_phi_ln7_1_reg_205 <= array_2_q0;
                elsif (((icmp_ln6_reg_425_pp0_iter3_reg = ap_const_lv1_0) and (trunc_ln7_2_reg_463 = ap_const_lv3_1))) then 
                    ap_phi_reg_pp0_iter4_phi_ln7_1_reg_205 <= array_1_q0;
                elsif (((icmp_ln6_reg_425_pp0_iter3_reg = ap_const_lv1_0) and (trunc_ln7_2_reg_463 = ap_const_lv3_0))) then 
                    ap_phi_reg_pp0_iter4_phi_ln7_1_reg_205 <= array_0_q0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter4_phi_ln7_1_reg_205 <= ap_phi_reg_pp0_iter3_phi_ln7_1_reg_205;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter4_phi_ln7_2_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_206)) then
                if ((ap_const_boolean_1 = ap_condition_234)) then 
                    ap_phi_reg_pp0_iter4_phi_ln7_2_reg_216 <= array_2_q1;
                elsif (((icmp_ln6_reg_425_pp0_iter3_reg = ap_const_lv1_0) and (trunc_ln7_3_reg_492 = ap_const_lv3_1))) then 
                    ap_phi_reg_pp0_iter4_phi_ln7_2_reg_216 <= array_1_q1;
                elsif (((icmp_ln6_reg_425_pp0_iter3_reg = ap_const_lv1_0) and (trunc_ln7_3_reg_492 = ap_const_lv3_0))) then 
                    ap_phi_reg_pp0_iter4_phi_ln7_2_reg_216 <= array_0_q1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter4_phi_ln7_2_reg_216 <= ap_phi_reg_pp0_iter3_phi_ln7_2_reg_216;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter4_phi_ln7_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln7_1_reg_511 = ap_const_lv3_0)) and not((trunc_ln7_1_reg_511 = ap_const_lv3_1)) and (icmp_ln6_reg_425_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter4_phi_ln7_reg_227 <= array_2_q1;
            elsif (((icmp_ln6_reg_425_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln7_1_reg_511 = ap_const_lv3_1))) then 
                ap_phi_reg_pp0_iter4_phi_ln7_reg_227 <= array_1_q1;
            elsif (((icmp_ln6_reg_425_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln7_1_reg_511 = ap_const_lv3_0))) then 
                ap_phi_reg_pp0_iter4_phi_ln7_reg_227 <= array_0_q1;
            elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                ap_phi_reg_pp0_iter4_phi_ln7_reg_227 <= ap_phi_reg_pp0_iter3_phi_ln7_reg_227;
            end if; 
        end if;
    end process;

    i_0_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_reg_425 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_reg_193 <= i_reg_453;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_193 <= ap_const_lv11_3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_238_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln7_1_reg_435 <= add_ln7_1_fu_248_p2;
                trunc_ln7_reg_429 <= trunc_ln7_fu_244_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln7_1_reg_435_pp0_iter1_reg <= add_ln7_1_reg_435;
                add_ln7_1_reg_435_pp0_iter2_reg <= add_ln7_1_reg_435_pp0_iter1_reg;
                i_0_reg_193_pp0_iter1_reg <= i_0_reg_193;
                i_0_reg_193_pp0_iter2_reg <= i_0_reg_193_pp0_iter1_reg;
                i_0_reg_193_pp0_iter3_reg <= i_0_reg_193_pp0_iter2_reg;
                icmp_ln6_reg_425 <= icmp_ln6_fu_238_p2;
                icmp_ln6_reg_425_pp0_iter1_reg <= icmp_ln6_reg_425;
                icmp_ln6_reg_425_pp0_iter2_reg <= icmp_ln6_reg_425_pp0_iter1_reg;
                icmp_ln6_reg_425_pp0_iter3_reg <= icmp_ln6_reg_425_pp0_iter2_reg;
                mul_ln7_reg_580 <= mul_ln7_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_reg_425 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln7_2_reg_441 <= add_ln7_2_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln7_2_reg_441_pp0_iter1_reg <= add_ln7_2_reg_441;
                add_ln7_2_reg_441_pp0_iter2_reg <= add_ln7_2_reg_441_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_reg_425 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln7_reg_447 <= add_ln7_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln7_reg_447_pp0_iter1_reg <= add_ln7_reg_447;
                add_ln7_reg_447_pp0_iter2_reg <= add_ln7_reg_447_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                ap_phi_reg_pp0_iter1_phi_ln7_1_reg_205 <= ap_phi_reg_pp0_iter0_phi_ln7_1_reg_205;
                ap_phi_reg_pp0_iter1_phi_ln7_2_reg_216 <= ap_phi_reg_pp0_iter0_phi_ln7_2_reg_216;
                ap_phi_reg_pp0_iter1_phi_ln7_reg_227 <= ap_phi_reg_pp0_iter0_phi_ln7_reg_227;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                ap_phi_reg_pp0_iter2_phi_ln7_1_reg_205 <= ap_phi_reg_pp0_iter1_phi_ln7_1_reg_205;
                ap_phi_reg_pp0_iter2_phi_ln7_2_reg_216 <= ap_phi_reg_pp0_iter1_phi_ln7_2_reg_216;
                ap_phi_reg_pp0_iter2_phi_ln7_reg_227 <= ap_phi_reg_pp0_iter1_phi_ln7_reg_227;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                ap_phi_reg_pp0_iter3_phi_ln7_1_reg_205 <= ap_phi_reg_pp0_iter2_phi_ln7_1_reg_205;
                ap_phi_reg_pp0_iter3_phi_ln7_2_reg_216 <= ap_phi_reg_pp0_iter2_phi_ln7_2_reg_216;
                ap_phi_reg_pp0_iter3_phi_ln7_reg_227 <= ap_phi_reg_pp0_iter2_phi_ln7_reg_227;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_reg_425 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                i_reg_453 <= i_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_reg_425_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                trunc_ln7_1_reg_511 <= trunc_ln7_1_fu_350_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_reg_425_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                trunc_ln7_2_reg_463 <= trunc_ln7_2_fu_306_p1;
                udiv_ln7_2_reg_467 <= mul_ln7_3_fu_404_p2(21 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_reg_425_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                trunc_ln7_3_reg_492 <= trunc_ln7_3_fu_340_p1;
                udiv_ln7_reg_472 <= mul_ln7_1_fu_411_p2(21 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_reg_425_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                udiv_ln7_1_reg_458 <= mul_ln7_2_fu_397_p2(21 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                udiv_ln7_3_reg_560 <= mul_ln7_4_fu_418_p2(23 downto 13);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln6_fu_238_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln6_fu_238_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln6_fu_238_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln7_1_fu_248_p2 <= std_logic_vector(signed(ap_const_lv10_3FE) + signed(trunc_ln7_fu_244_p1));
    add_ln7_2_fu_260_p2 <= std_logic_vector(signed(ap_const_lv10_3FD) + signed(trunc_ln7_reg_429));
    add_ln7_3_fu_379_p2 <= std_logic_vector(unsigned(mul_ln7_reg_580) + unsigned(ap_phi_reg_pp0_iter4_phi_ln7_reg_227));
    add_ln7_fu_271_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(trunc_ln7_reg_429));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state20 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_206_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter3)
    begin
                ap_condition_206 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001));
    end process;


    ap_condition_220_assign_proc : process(icmp_ln6_reg_425_pp0_iter3_reg, trunc_ln7_2_reg_463)
    begin
                ap_condition_220 <= (not((trunc_ln7_2_reg_463 = ap_const_lv3_0)) and not((trunc_ln7_2_reg_463 = ap_const_lv3_1)) and (icmp_ln6_reg_425_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_condition_234_assign_proc : process(icmp_ln6_reg_425_pp0_iter3_reg, trunc_ln7_3_reg_492)
    begin
                ap_condition_234 <= (not((trunc_ln7_3_reg_492 = ap_const_lv3_0)) and not((trunc_ln7_3_reg_492 = ap_const_lv3_1)) and (icmp_ln6_reg_425_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln6_fu_238_p2)
    begin
        if ((icmp_ln6_fu_238_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_197_p4_assign_proc : process(i_0_reg_193, ap_CS_fsm_pp0_stage0, icmp_ln6_reg_425, i_reg_453, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln6_reg_425 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_0_phi_fu_197_p4 <= i_reg_453;
        else 
            ap_phi_mux_i_0_phi_fu_197_p4 <= i_0_reg_193;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_phi_ln7_1_reg_205 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln7_2_reg_216 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln7_reg_227 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    array_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, zext_ln7_1_fu_334_p1, ap_block_pp0_stage2, zext_ln7_3_fu_391_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            array_0_address0 <= zext_ln7_3_fu_391_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            array_0_address0 <= zext_ln7_1_fu_334_p1(9 - 1 downto 0);
        else 
            array_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    array_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage2, zext_ln7_2_fu_344_p1, zext_ln7_fu_354_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                array_0_address1 <= zext_ln7_fu_354_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                array_0_address1 <= zext_ln7_2_fu_344_p1(9 - 1 downto 0);
            else 
                array_0_address1 <= "XXXXXXXXX";
            end if;
        else 
            array_0_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    array_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            array_0_ce0 <= ap_const_logic_1;
        else 
            array_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    array_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            array_0_ce1 <= ap_const_logic_1;
        else 
            array_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    array_0_d0 <= add_ln7_3_fu_379_p2;

    array_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter4, trunc_ln7_4_fu_387_p1)
    begin
        if (((trunc_ln7_4_fu_387_p1 = ap_const_lv3_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            array_0_we0 <= ap_const_logic_1;
        else 
            array_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    array_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, zext_ln7_1_fu_334_p1, ap_block_pp0_stage2, zext_ln7_3_fu_391_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            array_1_address0 <= zext_ln7_3_fu_391_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            array_1_address0 <= zext_ln7_1_fu_334_p1(9 - 1 downto 0);
        else 
            array_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    array_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage2, zext_ln7_2_fu_344_p1, zext_ln7_fu_354_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                array_1_address1 <= zext_ln7_fu_354_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                array_1_address1 <= zext_ln7_2_fu_344_p1(9 - 1 downto 0);
            else 
                array_1_address1 <= "XXXXXXXXX";
            end if;
        else 
            array_1_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    array_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            array_1_ce0 <= ap_const_logic_1;
        else 
            array_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    array_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            array_1_ce1 <= ap_const_logic_1;
        else 
            array_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    array_1_d0 <= add_ln7_3_fu_379_p2;

    array_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter4, trunc_ln7_4_fu_387_p1)
    begin
        if (((trunc_ln7_4_fu_387_p1 = ap_const_lv3_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            array_1_we0 <= ap_const_logic_1;
        else 
            array_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    array_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, zext_ln7_1_fu_334_p1, ap_block_pp0_stage2, zext_ln7_3_fu_391_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            array_2_address0 <= zext_ln7_3_fu_391_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            array_2_address0 <= zext_ln7_1_fu_334_p1(9 - 1 downto 0);
        else 
            array_2_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    array_2_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage2, zext_ln7_2_fu_344_p1, zext_ln7_fu_354_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                array_2_address1 <= zext_ln7_fu_354_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                array_2_address1 <= zext_ln7_2_fu_344_p1(9 - 1 downto 0);
            else 
                array_2_address1 <= "XXXXXXXXX";
            end if;
        else 
            array_2_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    array_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            array_2_ce0 <= ap_const_logic_1;
        else 
            array_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    array_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            array_2_ce1 <= ap_const_logic_1;
        else 
            array_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    array_2_d0 <= add_ln7_3_fu_379_p2;

    array_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter4, trunc_ln7_4_fu_387_p1)
    begin
        if ((not((trunc_ln7_4_fu_387_p1 = ap_const_lv3_0)) and not((trunc_ln7_4_fu_387_p1 = ap_const_lv3_1)) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            array_2_we0 <= ap_const_logic_1;
        else 
            array_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_254_p0 <= std_logic_vector(signed(ap_const_lv10_3FE) + signed(trunc_ln7_fu_244_p1));
    grp_fu_254_p1 <= ap_const_lv10_3(3 - 1 downto 0);
    grp_fu_265_p0 <= std_logic_vector(signed(ap_const_lv10_3FD) + signed(trunc_ln7_reg_429));
    grp_fu_265_p1 <= ap_const_lv10_3(3 - 1 downto 0);
    grp_fu_276_p0 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(trunc_ln7_reg_429));
    grp_fu_276_p1 <= ap_const_lv10_3(3 - 1 downto 0);
    grp_fu_282_p1 <= ap_const_lv11_3(3 - 1 downto 0);
    i_fu_288_p2 <= std_logic_vector(unsigned(i_0_reg_193) + unsigned(ap_const_lv11_1));
    icmp_ln6_fu_238_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_197_p4 = ap_const_lv11_400) else "0";
    mul_ln7_1_fu_411_p0 <= ap_const_lv22_556(12 - 1 downto 0);
    mul_ln7_1_fu_411_p1 <= mul_ln7_1_fu_411_p10(10 - 1 downto 0);
    mul_ln7_1_fu_411_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_reg_447_pp0_iter2_reg),22));
    mul_ln7_2_fu_397_p0 <= ap_const_lv22_556(12 - 1 downto 0);
    mul_ln7_2_fu_397_p1 <= mul_ln7_2_fu_397_p10(10 - 1 downto 0);
    mul_ln7_2_fu_397_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_1_reg_435_pp0_iter2_reg),22));
    mul_ln7_3_fu_404_p0 <= ap_const_lv22_556(12 - 1 downto 0);
    mul_ln7_3_fu_404_p1 <= mul_ln7_3_fu_404_p10(10 - 1 downto 0);
    mul_ln7_3_fu_404_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_2_reg_441_pp0_iter2_reg),22));
    mul_ln7_4_fu_418_p0 <= ap_const_lv24_AAB(13 - 1 downto 0);
    mul_ln7_4_fu_418_p1 <= mul_ln7_4_fu_418_p10(11 - 1 downto 0);
    mul_ln7_4_fu_418_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_193_pp0_iter3_reg),24));
    mul_ln7_fu_373_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_phi_reg_pp0_iter4_phi_ln7_2_reg_216) * signed(ap_phi_reg_pp0_iter4_phi_ln7_1_reg_205))), 32));
    trunc_ln7_1_fu_350_p1 <= grp_fu_276_p2(3 - 1 downto 0);
    trunc_ln7_2_fu_306_p1 <= grp_fu_254_p2(3 - 1 downto 0);
    trunc_ln7_3_fu_340_p1 <= grp_fu_265_p2(3 - 1 downto 0);
    trunc_ln7_4_fu_387_p1 <= grp_fu_282_p2(3 - 1 downto 0);
    trunc_ln7_fu_244_p1 <= ap_phi_mux_i_0_phi_fu_197_p4(10 - 1 downto 0);
    zext_ln7_1_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udiv_ln7_1_reg_458),64));
    zext_ln7_2_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udiv_ln7_2_reg_467),64));
    zext_ln7_3_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udiv_ln7_3_reg_560),64));
    zext_ln7_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udiv_ln7_reg_472),64));
end behav;
