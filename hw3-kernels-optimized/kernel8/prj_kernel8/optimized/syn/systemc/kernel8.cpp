// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "kernel8.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic kernel8::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic kernel8::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> kernel8::ap_ST_fsm_state1 = "1";
const sc_lv<5> kernel8::ap_ST_fsm_state2 = "10";
const sc_lv<5> kernel8::ap_ST_fsm_state3 = "100";
const sc_lv<5> kernel8::ap_ST_fsm_pp0_stage0 = "1000";
const sc_lv<5> kernel8::ap_ST_fsm_state8 = "10000";
const sc_lv<32> kernel8::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool kernel8::ap_const_boolean_1 = true;
const sc_lv<32> kernel8::ap_const_lv32_3 = "11";
const bool kernel8::ap_const_boolean_0 = false;
const sc_lv<32> kernel8::ap_const_lv32_1 = "1";
const sc_lv<32> kernel8::ap_const_lv32_2 = "10";
const sc_lv<1> kernel8::ap_const_lv1_1 = "1";
const sc_lv<1> kernel8::ap_const_lv1_0 = "0";
const sc_lv<31> kernel8::ap_const_lv31_6 = "110";
const sc_lv<64> kernel8::ap_const_lv64_2 = "10";
const sc_lv<64> kernel8::ap_const_lv64_3 = "11";
const sc_lv<64> kernel8::ap_const_lv64_4 = "100";
const sc_lv<64> kernel8::ap_const_lv64_5 = "101";
const sc_lv<32> kernel8::ap_const_lv32_5 = "101";
const sc_lv<32> kernel8::ap_const_lv32_3FF = "1111111111";
const sc_lv<2> kernel8::ap_const_lv2_2 = "10";
const sc_lv<31> kernel8::ap_const_lv31_7FFFFFFA = "1111111111111111111111111111010";
const sc_lv<31> kernel8::ap_const_lv31_1 = "1";
const sc_lv<32> kernel8::ap_const_lv32_4 = "100";

kernel8::kernel8(sc_module_name name) : sc_module(name), mVcdFile(0) {
    kernel8_mux_42_32bkb_U1 = new kernel8_mux_42_32bkb<1,1,32,32,32,32,2,32>("kernel8_mux_42_32bkb_U1");
    kernel8_mux_42_32bkb_U1->din0(ap_phi_mux_tmp_0_0_phi_fu_178_p4);
    kernel8_mux_42_32bkb_U1->din1(ap_phi_mux_tmp_0_1_phi_fu_167_p4);
    kernel8_mux_42_32bkb_U1->din2(ap_phi_mux_tmp_1_1_phi_fu_156_p4);
    kernel8_mux_42_32bkb_U1->din3(ap_phi_mux_tmp_2_1_phi_fu_146_p4);
    kernel8_mux_42_32bkb_U1->din4(xor_ln12_reg_343);
    kernel8_mux_42_32bkb_U1->dout(rd_val_fu_254_p6);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln14_1_fu_238_p2);
    sensitive << ( offset );
    sensitive << ( zext_ln14_fu_234_p1 );

    SC_METHOD(thread_add_ln14_fu_228_p2);
    sensitive << ( ap_phi_mux_i_0_phi_fu_135_p4 );

    SC_METHOD(thread_and_ln6_fu_197_p2);
    sensitive << ( icmp_ln6_fu_185_p2 );
    sensitive << ( icmp_ln6_1_fu_191_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter3);

    SC_METHOD(thread_ap_condition_pp0_exit_iter2_state6);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_enable_operation_42);
    sensitive << ( ap_predicate_op42_load_state4 );

    SC_METHOD(thread_ap_enable_operation_44);
    sensitive << ( ap_predicate_op44_load_state5 );

    SC_METHOD(thread_ap_enable_operation_58);
    sensitive << ( icmp_ln9_reg_348_pp0_iter2_reg );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_state4_pp0_iter0_stage0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_enable_state5_pp0_iter1_stage0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_enable_state7_pp0_iter3_stage0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_phi_mux_i_0_phi_fu_135_p4);
    sensitive << ( i_0_reg_131 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln9_reg_348 );
    sensitive << ( i_reg_357 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_tmp_0_0_phi_fu_178_p4);
    sensitive << ( tmp_0_1_reg_164 );
    sensitive << ( tmp_0_0_reg_175 );
    sensitive << ( icmp_ln9_reg_348_pp0_iter2_reg );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_tmp_0_1_phi_fu_167_p4);
    sensitive << ( tmp_1_1_reg_153 );
    sensitive << ( tmp_0_1_reg_164 );
    sensitive << ( icmp_ln9_reg_348_pp0_iter2_reg );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_tmp_1_1_phi_fu_156_p4);
    sensitive << ( tmp_2_1_reg_143 );
    sensitive << ( tmp_1_1_reg_153 );
    sensitive << ( icmp_ln9_reg_348_pp0_iter2_reg );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_tmp_2_1_phi_fu_146_p4);
    sensitive << ( tmp_2_1_reg_143 );
    sensitive << ( icmp_ln9_reg_348_pp0_iter2_reg );
    sensitive << ( tmp_3_1_reg_367 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_predicate_op42_load_state4);
    sensitive << ( and_ln6_reg_333 );
    sensitive << ( icmp_ln9_fu_223_p2 );

    SC_METHOD(thread_ap_predicate_op44_load_state5);
    sensitive << ( and_ln6_reg_333 );
    sensitive << ( icmp_ln9_reg_348 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_array_r_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( sext_ln14_fu_243_p1 );

    SC_METHOD(thread_array_r_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln21_fu_278_p1 );

    SC_METHOD(thread_array_r_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_array_r_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_array_r_d1);
    sensitive << ( tmp_3_1_reg_367 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_array_r_we1);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln9_reg_348_pp0_iter2_reg );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_i_fu_248_p2);
    sensitive << ( ap_phi_mux_i_0_phi_fu_135_p4 );

    SC_METHOD(thread_icmp_ln6_1_fu_191_p2);
    sensitive << ( offset );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_icmp_ln6_fu_185_p2);
    sensitive << ( offset );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_icmp_ln9_fu_223_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( sub_ln9_reg_338 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln9_fu_219_p1 );

    SC_METHOD(thread_rd_val_2_fu_267_p3);
    sensitive << ( and_ln6_reg_333 );
    sensitive << ( rd_val_1_reg_362 );
    sensitive << ( rd_val_fu_254_p6 );

    SC_METHOD(thread_sext_ln14_fu_243_p1);
    sensitive << ( add_ln14_1_fu_238_p2 );

    SC_METHOD(thread_sub_ln9_fu_203_p2);
    sensitive << ( offset );

    SC_METHOD(thread_tmp_3_1_fu_273_p1);
    sensitive << ( multiplier );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tmp_3_1_fu_273_p2);
    sensitive << ( rd_val_2_fu_267_p3 );
    sensitive << ( tmp_3_1_fu_273_p1 );

    SC_METHOD(thread_trunc_ln12_fu_209_p1);
    sensitive << ( offset );

    SC_METHOD(thread_xor_ln12_fu_213_p2);
    sensitive << ( trunc_ln12_fu_209_p1 );

    SC_METHOD(thread_zext_ln14_fu_234_p1);
    sensitive << ( add_ln14_fu_228_p2 );

    SC_METHOD(thread_zext_ln21_fu_278_p1);
    sensitive << ( i_0_reg_131_pp0_iter2_reg );

    SC_METHOD(thread_zext_ln9_fu_219_p1);
    sensitive << ( ap_phi_mux_i_0_phi_fu_135_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "kernel8_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, array_r_address0, "(port)array_r_address0");
    sc_trace(mVcdFile, array_r_ce0, "(port)array_r_ce0");
    sc_trace(mVcdFile, array_r_q0, "(port)array_r_q0");
    sc_trace(mVcdFile, array_r_address1, "(port)array_r_address1");
    sc_trace(mVcdFile, array_r_ce1, "(port)array_r_ce1");
    sc_trace(mVcdFile, array_r_we1, "(port)array_r_we1");
    sc_trace(mVcdFile, array_r_d1, "(port)array_r_d1");
    sc_trace(mVcdFile, array_r_q1, "(port)array_r_q1");
    sc_trace(mVcdFile, multiplier, "(port)multiplier");
    sc_trace(mVcdFile, offset, "(port)offset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_0_reg_131, "i_0_reg_131");
    sc_trace(mVcdFile, i_0_reg_131_pp0_iter1_reg, "i_0_reg_131_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter0, "ap_block_state4_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter1, "ap_block_state5_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter2, "ap_block_state6_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter3, "ap_block_state7_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_0_reg_131_pp0_iter2_reg, "i_0_reg_131_pp0_iter2_reg");
    sc_trace(mVcdFile, tmp_2_1_reg_143, "tmp_2_1_reg_143");
    sc_trace(mVcdFile, tmp_1_1_reg_153, "tmp_1_1_reg_153");
    sc_trace(mVcdFile, tmp_0_1_reg_164, "tmp_0_1_reg_164");
    sc_trace(mVcdFile, tmp_0_0_reg_175, "tmp_0_0_reg_175");
    sc_trace(mVcdFile, tmp_0_reg_293, "tmp_0_reg_293");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_1_reg_298, "tmp_1_reg_298");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, and_ln6_fu_197_p2, "and_ln6_fu_197_p2");
    sc_trace(mVcdFile, and_ln6_reg_333, "and_ln6_reg_333");
    sc_trace(mVcdFile, sub_ln9_fu_203_p2, "sub_ln9_fu_203_p2");
    sc_trace(mVcdFile, sub_ln9_reg_338, "sub_ln9_reg_338");
    sc_trace(mVcdFile, xor_ln12_fu_213_p2, "xor_ln12_fu_213_p2");
    sc_trace(mVcdFile, xor_ln12_reg_343, "xor_ln12_reg_343");
    sc_trace(mVcdFile, icmp_ln9_fu_223_p2, "icmp_ln9_fu_223_p2");
    sc_trace(mVcdFile, icmp_ln9_reg_348, "icmp_ln9_reg_348");
    sc_trace(mVcdFile, icmp_ln9_reg_348_pp0_iter1_reg, "icmp_ln9_reg_348_pp0_iter1_reg");
    sc_trace(mVcdFile, icmp_ln9_reg_348_pp0_iter2_reg, "icmp_ln9_reg_348_pp0_iter2_reg");
    sc_trace(mVcdFile, i_fu_248_p2, "i_fu_248_p2");
    sc_trace(mVcdFile, i_reg_357, "i_reg_357");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, rd_val_1_reg_362, "rd_val_1_reg_362");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, tmp_3_1_fu_273_p2, "tmp_3_1_fu_273_p2");
    sc_trace(mVcdFile, tmp_3_1_reg_367, "tmp_3_1_reg_367");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter2_state6, "ap_condition_pp0_exit_iter2_state6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_phi_mux_i_0_phi_fu_135_p4, "ap_phi_mux_i_0_phi_fu_135_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_phi_mux_tmp_2_1_phi_fu_146_p4, "ap_phi_mux_tmp_2_1_phi_fu_146_p4");
    sc_trace(mVcdFile, ap_phi_mux_tmp_1_1_phi_fu_156_p4, "ap_phi_mux_tmp_1_1_phi_fu_156_p4");
    sc_trace(mVcdFile, ap_phi_mux_tmp_0_1_phi_fu_167_p4, "ap_phi_mux_tmp_0_1_phi_fu_167_p4");
    sc_trace(mVcdFile, ap_phi_mux_tmp_0_0_phi_fu_178_p4, "ap_phi_mux_tmp_0_0_phi_fu_178_p4");
    sc_trace(mVcdFile, sext_ln14_fu_243_p1, "sext_ln14_fu_243_p1");
    sc_trace(mVcdFile, zext_ln21_fu_278_p1, "zext_ln21_fu_278_p1");
    sc_trace(mVcdFile, icmp_ln6_fu_185_p2, "icmp_ln6_fu_185_p2");
    sc_trace(mVcdFile, icmp_ln6_1_fu_191_p2, "icmp_ln6_1_fu_191_p2");
    sc_trace(mVcdFile, trunc_ln12_fu_209_p1, "trunc_ln12_fu_209_p1");
    sc_trace(mVcdFile, zext_ln9_fu_219_p1, "zext_ln9_fu_219_p1");
    sc_trace(mVcdFile, add_ln14_fu_228_p2, "add_ln14_fu_228_p2");
    sc_trace(mVcdFile, zext_ln14_fu_234_p1, "zext_ln14_fu_234_p1");
    sc_trace(mVcdFile, add_ln14_1_fu_238_p2, "add_ln14_1_fu_238_p2");
    sc_trace(mVcdFile, rd_val_fu_254_p6, "rd_val_fu_254_p6");
    sc_trace(mVcdFile, rd_val_2_fu_267_p3, "rd_val_2_fu_267_p3");
    sc_trace(mVcdFile, tmp_3_1_fu_273_p1, "tmp_3_1_fu_273_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp0, "ap_block_pp0");
    sc_trace(mVcdFile, ap_predicate_op42_load_state4, "ap_predicate_op42_load_state4");
    sc_trace(mVcdFile, ap_enable_operation_42, "ap_enable_operation_42");
    sc_trace(mVcdFile, ap_enable_state4_pp0_iter0_stage0, "ap_enable_state4_pp0_iter0_stage0");
    sc_trace(mVcdFile, ap_predicate_op44_load_state5, "ap_predicate_op44_load_state5");
    sc_trace(mVcdFile, ap_enable_operation_44, "ap_enable_operation_44");
    sc_trace(mVcdFile, ap_enable_state5_pp0_iter1_stage0, "ap_enable_state5_pp0_iter1_stage0");
    sc_trace(mVcdFile, ap_enable_operation_58, "ap_enable_operation_58");
    sc_trace(mVcdFile, ap_enable_state7_pp0_iter3_stage0, "ap_enable_state7_pp0_iter3_stage0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("kernel8.hdltvin.dat");
    mHdltvoutHandle.open("kernel8.hdltvout.dat");
}

kernel8::~kernel8() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete kernel8_mux_42_32bkb_U1;
}

void kernel8::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(icmp_ln9_fu_223_p2.read(), ap_const_lv1_0))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                    (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter2_state6.read())))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter2_state6.read()))) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_enable_reg_pp0_iter3 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_reg_348.read(), ap_const_lv1_1))) {
        i_0_reg_131 = i_reg_357.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_131 = ap_const_lv31_6;
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_reg_348_pp0_iter2_reg.read(), ap_const_lv1_1))) {
        tmp_0_0_reg_175 = tmp_0_1_reg_164.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_0_0_reg_175 = tmp_0_reg_293.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_reg_348_pp0_iter2_reg.read(), ap_const_lv1_1))) {
        tmp_0_1_reg_164 = tmp_1_1_reg_153.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_0_1_reg_164 = tmp_1_reg_298.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_reg_348_pp0_iter2_reg.read(), ap_const_lv1_1))) {
        tmp_1_1_reg_153 = tmp_2_1_reg_143.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_1_1_reg_153 = array_r_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_reg_348_pp0_iter2_reg.read(), ap_const_lv1_1))) {
        tmp_2_1_reg_143 = tmp_3_1_reg_367.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_2_1_reg_143 = array_r_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        and_ln6_reg_333 = and_ln6_fu_197_p2.read();
        sub_ln9_reg_338 = sub_ln9_fu_203_p2.read();
        xor_ln12_reg_343 = xor_ln12_fu_213_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_0_reg_131_pp0_iter1_reg = i_0_reg_131.read();
        icmp_ln9_reg_348 = icmp_ln9_fu_223_p2.read();
        icmp_ln9_reg_348_pp0_iter1_reg = icmp_ln9_reg_348.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        i_0_reg_131_pp0_iter2_reg = i_0_reg_131_pp0_iter1_reg.read();
        icmp_ln9_reg_348_pp0_iter2_reg = icmp_ln9_reg_348_pp0_iter1_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln9_fu_223_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        i_reg_357 = i_fu_248_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(and_ln6_reg_333.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln9_reg_348.read(), ap_const_lv1_1))) {
        rd_val_1_reg_362 = array_r_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        tmp_0_reg_293 = array_r_q0.read();
        tmp_1_reg_298 = array_r_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(icmp_ln9_reg_348_pp0_iter1_reg.read(), ap_const_lv1_1))) {
        tmp_3_1_reg_367 = tmp_3_1_fu_273_p2.read();
    }
}

void kernel8::thread_add_ln14_1_fu_238_p2() {
    add_ln14_1_fu_238_p2 = (!zext_ln14_fu_234_p1.read().is_01() || !offset.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln14_fu_234_p1.read()) + sc_biguint<32>(offset.read()));
}

void kernel8::thread_add_ln14_fu_228_p2() {
    add_ln14_fu_228_p2 = (!ap_phi_mux_i_0_phi_fu_135_p4.read().is_01() || !ap_const_lv31_7FFFFFFA.is_01())? sc_lv<31>(): (sc_biguint<31>(ap_phi_mux_i_0_phi_fu_135_p4.read()) + sc_bigint<31>(ap_const_lv31_7FFFFFFA));
}

void kernel8::thread_and_ln6_fu_197_p2() {
    and_ln6_fu_197_p2 = (icmp_ln6_fu_185_p2.read() & icmp_ln6_1_fu_191_p2.read());
}

void kernel8::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[3];
}

void kernel8::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void kernel8::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void kernel8::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void kernel8::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[4];
}

void kernel8::thread_ap_block_pp0() {
    ap_block_pp0 = (esl_seteq<1,5,5>(ap_ST_fsm_pp0_stage0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_pp0_stage0_subdone.read()));
}

void kernel8::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel8::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel8::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel8::thread_ap_block_state4_pp0_stage0_iter0() {
    ap_block_state4_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel8::thread_ap_block_state5_pp0_stage0_iter1() {
    ap_block_state5_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel8::thread_ap_block_state6_pp0_stage0_iter2() {
    ap_block_state6_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel8::thread_ap_block_state7_pp0_stage0_iter3() {
    ap_block_state7_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel8::thread_ap_condition_pp0_exit_iter2_state6() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
        ap_condition_pp0_exit_iter2_state6 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter2_state6 = ap_const_logic_0;
    }
}

void kernel8::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void kernel8::thread_ap_enable_operation_42() {
    ap_enable_operation_42 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op42_load_state4.read());
}

void kernel8::thread_ap_enable_operation_44() {
    ap_enable_operation_44 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_load_state5.read());
}

void kernel8::thread_ap_enable_operation_58() {
    ap_enable_operation_58 = esl_seteq<1,1,1>(icmp_ln9_reg_348_pp0_iter2_reg.read(), ap_const_lv1_1);
}

void kernel8::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void kernel8::thread_ap_enable_state4_pp0_iter0_stage0() {
    ap_enable_state4_pp0_iter0_stage0 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_logic_1));
}

void kernel8::thread_ap_enable_state5_pp0_iter1_stage0() {
    ap_enable_state5_pp0_iter1_stage0 = (esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1));
}

void kernel8::thread_ap_enable_state7_pp0_iter3_stage0() {
    ap_enable_state7_pp0_iter3_stage0 = (esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1));
}

void kernel8::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void kernel8::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void kernel8::thread_ap_phi_mux_i_0_phi_fu_135_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_reg_348.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_0_phi_fu_135_p4 = i_reg_357.read();
    } else {
        ap_phi_mux_i_0_phi_fu_135_p4 = i_0_reg_131.read();
    }
}

void kernel8::thread_ap_phi_mux_tmp_0_0_phi_fu_178_p4() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_reg_348_pp0_iter2_reg.read(), ap_const_lv1_1))) {
        ap_phi_mux_tmp_0_0_phi_fu_178_p4 = tmp_0_1_reg_164.read();
    } else {
        ap_phi_mux_tmp_0_0_phi_fu_178_p4 = tmp_0_0_reg_175.read();
    }
}

void kernel8::thread_ap_phi_mux_tmp_0_1_phi_fu_167_p4() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_reg_348_pp0_iter2_reg.read(), ap_const_lv1_1))) {
        ap_phi_mux_tmp_0_1_phi_fu_167_p4 = tmp_1_1_reg_153.read();
    } else {
        ap_phi_mux_tmp_0_1_phi_fu_167_p4 = tmp_0_1_reg_164.read();
    }
}

void kernel8::thread_ap_phi_mux_tmp_1_1_phi_fu_156_p4() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_reg_348_pp0_iter2_reg.read(), ap_const_lv1_1))) {
        ap_phi_mux_tmp_1_1_phi_fu_156_p4 = tmp_2_1_reg_143.read();
    } else {
        ap_phi_mux_tmp_1_1_phi_fu_156_p4 = tmp_1_1_reg_153.read();
    }
}

void kernel8::thread_ap_phi_mux_tmp_2_1_phi_fu_146_p4() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_reg_348_pp0_iter2_reg.read(), ap_const_lv1_1))) {
        ap_phi_mux_tmp_2_1_phi_fu_146_p4 = tmp_3_1_reg_367.read();
    } else {
        ap_phi_mux_tmp_2_1_phi_fu_146_p4 = tmp_2_1_reg_143.read();
    }
}

void kernel8::thread_ap_predicate_op42_load_state4() {
    ap_predicate_op42_load_state4 = (esl_seteq<1,1,1>(icmp_ln9_fu_223_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(and_ln6_reg_333.read(), ap_const_lv1_0));
}

void kernel8::thread_ap_predicate_op44_load_state5() {
    ap_predicate_op44_load_state5 = (esl_seteq<1,1,1>(and_ln6_reg_333.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_ln9_reg_348.read(), ap_const_lv1_1));
}

void kernel8::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void kernel8::thread_array_r_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        array_r_address0 =  (sc_lv<10>) (sext_ln14_fu_243_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        array_r_address0 =  (sc_lv<10>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        array_r_address0 =  (sc_lv<10>) (ap_const_lv64_2);
    } else {
        array_r_address0 = "XXXXXXXXXX";
    }
}

void kernel8::thread_array_r_address1() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        array_r_address1 =  (sc_lv<10>) (zext_ln21_fu_278_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        array_r_address1 =  (sc_lv<10>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        array_r_address1 =  (sc_lv<10>) (ap_const_lv64_3);
    } else {
        array_r_address1 = "XXXXXXXXXX";
    }
}

void kernel8::thread_array_r_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())))) {
        array_r_ce0 = ap_const_logic_1;
    } else {
        array_r_ce0 = ap_const_logic_0;
    }
}

void kernel8::thread_array_r_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read())))) {
        array_r_ce1 = ap_const_logic_1;
    } else {
        array_r_ce1 = ap_const_logic_0;
    }
}

void kernel8::thread_array_r_d1() {
    array_r_d1 = tmp_3_1_reg_367.read();
}

void kernel8::thread_array_r_we1() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_reg_348_pp0_iter2_reg.read(), ap_const_lv1_1))) {
        array_r_we1 = ap_const_logic_1;
    } else {
        array_r_we1 = ap_const_logic_0;
    }
}

void kernel8::thread_i_fu_248_p2() {
    i_fu_248_p2 = (!ap_phi_mux_i_0_phi_fu_135_p4.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(ap_phi_mux_i_0_phi_fu_135_p4.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void kernel8::thread_icmp_ln6_1_fu_191_p2() {
    icmp_ln6_1_fu_191_p2 = (!offset.read().is_01() || !ap_const_lv32_5.is_01())? sc_lv<1>(): (sc_bigint<32>(offset.read()) < sc_bigint<32>(ap_const_lv32_5));
}

void kernel8::thread_icmp_ln6_fu_185_p2() {
    icmp_ln6_fu_185_p2 = (!offset.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<1>(): (sc_bigint<32>(offset.read()) > sc_bigint<32>(ap_const_lv32_2));
}

void kernel8::thread_icmp_ln9_fu_223_p2() {
    icmp_ln9_fu_223_p2 = (!zext_ln9_fu_219_p1.read().is_01() || !sub_ln9_reg_338.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln9_fu_219_p1.read()) < sc_bigint<32>(sub_ln9_reg_338.read()));
}

void kernel8::thread_rd_val_2_fu_267_p3() {
    rd_val_2_fu_267_p3 = (!and_ln6_reg_333.read()[0].is_01())? sc_lv<32>(): ((and_ln6_reg_333.read()[0].to_bool())? rd_val_fu_254_p6.read(): rd_val_1_reg_362.read());
}

void kernel8::thread_sext_ln14_fu_243_p1() {
    sext_ln14_fu_243_p1 = esl_sext<64,32>(add_ln14_1_fu_238_p2.read());
}

void kernel8::thread_sub_ln9_fu_203_p2() {
    sub_ln9_fu_203_p2 = (!ap_const_lv32_3FF.is_01() || !offset.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_3FF) - sc_biguint<32>(offset.read()));
}

void kernel8::thread_tmp_3_1_fu_273_p1() {
    tmp_3_1_fu_273_p1 = multiplier.read();
}

void kernel8::thread_tmp_3_1_fu_273_p2() {
    tmp_3_1_fu_273_p2 = (!rd_val_2_fu_267_p3.read().is_01() || !tmp_3_1_fu_273_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(rd_val_2_fu_267_p3.read()) * sc_bigint<32>(tmp_3_1_fu_273_p1.read());
}

void kernel8::thread_trunc_ln12_fu_209_p1() {
    trunc_ln12_fu_209_p1 = offset.read().range(2-1, 0);
}

void kernel8::thread_xor_ln12_fu_213_p2() {
    xor_ln12_fu_213_p2 = (trunc_ln12_fu_209_p1.read() ^ ap_const_lv2_2);
}

void kernel8::thread_zext_ln14_fu_234_p1() {
    zext_ln14_fu_234_p1 = esl_zext<32,31>(add_ln14_fu_228_p2.read());
}

void kernel8::thread_zext_ln21_fu_278_p1() {
    zext_ln21_fu_278_p1 = esl_zext<64,31>(i_0_reg_131_pp0_iter2_reg.read());
}

void kernel8::thread_zext_ln9_fu_219_p1() {
    zext_ln9_fu_219_p1 = esl_zext<32,31>(ap_phi_mux_i_0_phi_fu_135_p4.read());
}

void kernel8::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 8 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

void kernel8::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_address0\" :  \"" << array_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_ce0\" :  \"" << array_r_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array_r_q0\" :  \"" << array_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_address1\" :  \"" << array_r_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_ce1\" :  \"" << array_r_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_we1\" :  \"" << array_r_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_d1\" :  \"" << array_r_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array_r_q1\" :  \"" << array_r_q1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"multiplier\" :  \"" << multiplier.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"offset\" :  \"" << offset.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

